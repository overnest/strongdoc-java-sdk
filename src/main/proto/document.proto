syntax = "proto3";

// This section is specific for Java language
//option java_multiple_files = true;
//option objc_class_prefix = "SD";
option java_package = "com.strongsalt.strongdoc.sdk.proto";
option java_outer_classname = "Documents";
option java_generic_services = true;

package proto;

import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "encryption.proto";

message UploadDocStreamReq {
  oneof NameOrData {
    // The name of the document to upload.
    string docName = 1;
    // The data of the document to upload.
    bytes plaintext = 2;
  }
}

message UploadDocStreamResp {
  // The ID of the newly uploaded document.
  string docID = 1;
  // The number of bytes uploaded and stored.
  int64 bytes = 2;
}

message E2EEUploadDocStreamReq {
  message PreMetaDataType {
    string docName = 1;
    bool isEncryptedByClient = 2;
  }
  message PostMetaDataType {
    string macOfCipherText = 1;
  }
  message EncKeyList {
    repeated EncryptedKey encDocKeys = 1;
  }
  oneof uploadReqStageData {
    PreMetaDataType preMetaData = 1;
    EncKeyList encDocKeys = 2;
    bytes cipherText = 3;
    PostMetaDataType postMetaData = 4;
  }
}

message E2EEUploadDocStreamResp {
  message PubKeyList {
    repeated Key pubKeys = 1;
  }
  oneof uploadRespStageData {
    bool readyForData = 1;
    PubKeyList encryptors = 2;
    string docID = 3;
  }
}

message DownloadDocStreamReq {
  // The ID of the document to download.
  string docID = 1;
}

message DownloadDocStreamResp {
  // The ID of the document downloaded.
  string docID = 1;
  // The decrypted data of the document.
  bytes plaintext = 2;
}

message E2EEPrepareDownloadDocReq {
  string docID = 1;
}

message E2EEPrepareDownloadDocResp {
  DocumentAccessMetadata documentAccessMetadata = 1;
}

/*message KeyChain {
  repeated EncryptedKey keys = 1;
}*/

message DocumentAccessMetadata {
  // Whether or not this user is allowed to access this document.
  bool isAccessible = 1;
  // Whether or not the document is client-side encrypted.
  bool isClientSide = 2;
  // A chain of EncryptedKeys. The user's passwordKey is used to decrypt the first one.
  // Each one is used to decrypt the next one. The final plaintext will be the docKey.
  repeated EncryptedKey docKeyChain = 3;
  // The MAC of the ciphertext of the document. Only used when downloading.
  string mac = 4;
  // Whether or not this user is allowed to share this document. Only used when sharing.
  bool isSharable = 5;
}

message E2EEDownloadDocStreamReq {
  string docID = 1;
}

message E2EEDownloadDocStreamResp {
  bytes cipherText = 1;
}

message UploadDocReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "UploadDocReq"
    }
    example: { 
        value: '{"docName": "bribeamount", "plaintext": "I paid 1M to Volodymyr"}'
    }
  };

  // The name of the document to upload.
  string docName = 1;
  // The data of the document to upload.
  string plaintext = 2;
}

message UploadDocResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "UploadDocResp"
    }
    example: { 
        value: '{"docID": "bribeamount_ID"}'
    }
  };

  // The ID of the document uploaded.
  string docID = 1;
}

message DownloadDocReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "DownloadDocReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID"}'
    }
  };

  // The ID of the document to download.
  string docID = 1;
}

message DownloadDocResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "DownloadDocReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID", "plaintext": "I paid 1M to Volodymyr"}'
    }
  };

  // The ID of the document downloaded.
  string docID = 1;
  // The decrypted data of the downloaded document.
  string plaintext = 2;
}
message PrepareShareDocumentReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "PrepareShareDocReq"
    }
    example: {
      value: '{"docID": "bribeamount_ID", "receiverType": "USER", "receiverIDs": ["FBI"]}'
    }
  };

  // The ID of the document to share.
  string docID = 1;
  // The Type of receiver.
  AccessType receiverType = 2;
  // The receiver IDs to share it to.
  repeated string receiverIDs = 3;
}

message PrepareShareDocumentResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "PrepareShareDocResp"
    }
    example: {
      value: '{"accessMetaData": {"isAccessible": true, "isClientSide": true, "docKeyChain": [{"encKey": "asdf", "encryptorID": "abc123", "ownerID": "person", "keyID": "asdf"}], "isSharable": true}, "encryptors": [{"key": "abc123", "ownerID": "person", "ownerType": "USER", "keyID": "asdf", "version": 1}], "receiversWithDoc": ["receiver1"], "unsharableReceivers": ["receiver2"]}'
    }
  };

  // The access metadata of this document
  DocumentAccessMetadata accessMetaData = 1;
  // The public keys that the docKey needs to be encrypted with
  repeated Key encryptors = 2;
  // Receivers who have access to this document
  repeated string receiversWithDoc = 3;
  // Receivers who are not allowed to access this document
  repeated string unsharableReceivers = 4;
}

message ShareDocumentReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "ShareDocReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID", "receiverType": "USER", "receiverID": "FBI", "encDocKey": {"encKey": "asdf", "encryptorID": "abc123", "ownerID": "person", "keyID": "asdf"}}'
    }
  };

  // The ID of the document to share.
  string docID = 1;
  // The type of receiver
  AccessType receiverType = 2;
  // The receiver ID to share it to.
  string receiverID = 3;
  // The encrypted document key
  EncryptedKey encDocKey = 4;
}
  
message ShareDocumentResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "ShareDocResp"
    }
    example: { 
        value: '{"success": true, "pubKey": {"key": "abc123", "ownerID": "person", "ownerType": "USER", "keyID": "asdf", "version": 1}, "receiverAlreadyAccessible": false, "receiverUnsharable": false}'
    }
  };

  // Whether the share was successful.
  bool success = 1;
  // The latest public key
  Key pubKey = 2;
  // Whether receiver already has access the document
  bool receiverAlreadyAccessible = 3;
  // Whether receiver can be shared
  bool receiverUnsharable = 4;
}
  
message UnshareDocumentReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "UnshareDocumentReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID", "receiverType": "USER", "receiverID": "Fox News"}'
    }
  };

  // The ID of the document to unshare.
  string docID = 1;
  // The type of receiver
  AccessType receiverType = 2;
  // The receiver ID to unshare.
  string receiverID = 3;
}
  
message UnshareDocumentResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "UnshareDocumentResp"
    }
    example: { 
        value: '{"success": true}'
    }
  };

  // Whether the unshare was successful.
  bool success = 1;
  // Whether the receiver was already unshared
  bool alreadyUnshared = 2;
  // Whether the unshare is allowed
  bool allowed = 3;
}

message ListDocumentsReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "ListDocumentsReq"
    }
  };
}

message ListDocumentsResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "ListDocumentsResp"
    }
    example: { 
        value: '{"documents": [{"docID": "bribeamount_ID", "docName": "bribeamount.pdf", "size": 561}]}'
    }
  };

  message Document {
    // The document ID.
    string docID = 1;
    // The document name.
    string docName = 2;
    // The document size.
    uint64 size = 3;
    google.protobuf.Timestamp createdAt = 4;
    google.protobuf.Timestamp deletedAt = 5;
  }

  // The list of documents.
  repeated Document documents = 1;
}

message RemoveDocumentReq{
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "RemoveDocumentReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID"}'
    }
  };

  // The ID of the document to remove.  
  string docID = 1;
}
  
message RemoveDocumentResp{
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "RemoveDocumentResp"
    }
    example: { 
        value: '{"status": true}'
    }
  };

  // Whether the document removal was successful.
  bool status = 1;
}


message ListDocActionHistoryReq{
  // TODO: example need to change
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
        title: "ListDocActionHistoryReq"
    }
    example: { 
        value: '{"docID": "bribeamount_ID"}'
    }
  };

  string docID = 1;
  string userID = 2;
  google.protobuf.Timestamp actionStartTime = 3;
  google.protobuf.Timestamp actionEndTime = 4;
  int32 page = 5;
  int32 per_page = 6;
}

message ListDocActionHistoryResp {
  // TODO: example need to change
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ListDocActionHistoryResp"
    }
    example: {
      value: '{"DocActionHistoryList":[{"userName": "Donald Trump", "userID": "donald.trump@whitehouse.gov", "isAdmin": true}]}'
    }
  };

  message DocActionHistory {
    string docID = 1;
    string userID = 2;
    string docName = 3;
    google.protobuf.Timestamp actionTime = 4;
    string actionType = 5;
    string OtherUserID = 6;
  }

  repeated DocActionHistory DocActionHistoryList = 1;
  int32 ResultTotalCount = 2;
  int32 Offset = 3;
}
