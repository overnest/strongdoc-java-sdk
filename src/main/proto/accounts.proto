syntax = "proto3";

// This section is specific for Java language
//option java_multiple_files = true;
//option objc_class_prefix = "SD";
option java_package = "com.strongsalt.strongdoc.sdk.proto";
option java_outer_classname = "Account";
option java_generic_services = true;

package proto;

import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/timestamp.proto";

message RegisterOrganizationReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RegisterOrganizationReq"
    }
    example: {
      value: '{"orgName": "WhiteHouse", "orgEmail": "email@company.com", "orgAddr": "1600 Pennsylvania Ave NW, Washington, DC 20500", "userName": "Donald Trump", "password": "ukrainismyfriend", "adminEmail": "donald.trump@whitehouse.gov", "sharableOrgs": ["cnn", "fbi", "democrats"], "multiLevelShare": true, "source": "", "sourceData": "{\\"registrationToken\\": \\"abcd1234\\"}"}'
    }
  };

  // The name of the organization. This value has to be unique.
  string orgName = 1;
  // The email of the organization.
  string orgEmail = 2;
  // The address of the organization. This is optional.
  string orgAddr = 3;
  // The administrator username. If the administrator does not exist,
  // it will be created.
  string userName = 4;
  // The administrator password.
  string password = 5;
  // The administrator email. This serves as the unique ID of
  // the administrator user.
  string adminEmail = 6;
  // The list of sharable organization IDs. The users in this
  // organization can only share documents to other users in
  // the organizations in the sharableOrgs list.
  repeated string sharableOrgs = 7;
  // Enables the ability to "reshare" a document that was shared
  // to him/her to another user.
  bool multiLevelShare = 8;
  // How was the organization registered (e.g. from "AWS Marketplace")
  string source = 9;
  // Any data related to registration from the source (in JSON)
  string sourceData = 10;
  // Stripe paymentID for syncronous account setup
  string pmID = 11;
}

message RegisterOrganizationResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RegisterOrganizationResp"
    }
    example: {
      value: '{"orgID": "WhiteHouse", "userID": "donald.trump@whitehouse.gov"}'
    }
  };

  // The ID of the created organization. This is the unique ID to
  // use on future operation with the organization.
  string orgID = 1;
  // The newly created unique administrator user ID.
  string userID = 2;
  // Token used for Stripe integration
  string clientSecret = 3;
}

message RegisterUserReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RegisterUserReq"
    }
    example: {
      value: '{"userName": "Mike Pence", "password": "donaldismyfriend", "email": "mike.pence@whitehouse.gov", "admin": "false"}'
    }
  };

  // The new username. If the user does not exist, it will be created.
  string userName = 1;
  // The user password.
  string password = 2;
  // The user email. This serves as the unique ID of the user.
  string email = 3;
  // Whether this new user is an administrator of the organization.
  bool admin = 4;
}

message RegisterUserResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RegisterUserResp"
    }
    example: {
      value: '{"userID": "mike.pence@whitehouse.gov"}'
    }
  };

  // The newly added unique user ID.
  string userID = 1;
}

message RemoveUserReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveUserReq"
    }
    example: {
      value: '{"userID": "donal.trump@whitehouse.gov"}'
    }
  };

  // The ID of the user to remove.
  string userID = 1;
}

message RemoveUserResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveUserResp"
    }
    example: {
      value: '{"count": 1}'
    }
  };

  // The count of the number of users removed
  int64 count = 1;
}

message PromoteUserReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "PromoteUserReq"
    }
    example: {
      value: '{"userID": "donald.duck@whitehouse.gov"}'
    }
  };

  // The ID of the user to promote.
  string userID = 1;
}

message PromoteUserResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "PromoteUserResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the promotion was successful.
  bool success = 1;
}

message DemoteUserReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "DemoteUserReq"
    }
    example: {
      value: '{"userID": "donald.trump@whitehouse.gov"}'
    }
  };

  // The ID of the user to demote.
  string userID = 1;
}

message DemoteUserResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "DemoteUserResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the demotion was successful.
  bool success = 1;
}

message LoginReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "LoginReq"
    }
    example: {
      value: '{"userID": "donald.trump@whitehouse.gov", "password": "ukrainismyfriend", "orgID": "WhiteHouse"}'
    }
  };

  // The ID of the user to login as.
  string userID = 1;
  // The password of the user.
  string password = 2;
  // The ID of the organization.
  string orgID = 3;
}

message LoginResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "LoginResp"
    }
    example: {
      value: '{"token": "blahblahblah"}'
    }
  };

  // The JWT token to be used for all APIs that require authentication.
  string token = 1;
}

message LogoutReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "LogoutReq"
    }
  };
}

message LogoutResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "LogoutResp"
    }
    example: {
      value: '{"status": "you OUT"}'
    }
  };

  // The logout status.
  string status = 1;
}

message ListUsersReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ListUsersReq"
    }
  };
}

message ListUsersResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ListUsersResp"
    }
    example: {
      value: '{"orgUsers":[{"userName": "Donald Trump", "userID": "donald.trump@whitehouse.gov", "isAdmin": true}]}'
    }
  };

  message OrgUser {
    // The name of the user.
    string userName = 1;
    // The ID of the user.
    string userID = 2;
    // Whether the user is an administrator.
    bool isAdmin = 3;
  }

  // The list of users in the organization.
  repeated OrgUser orgUsers = 1;
}

message RemoveOrganizationReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveOrganizationReq"
    }
    example: {
      value: '{"force": true}'
    }
  };

  // Whether to force removal of organization or not.
  bool force = 1;
}

message RemoveOrganizationResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveOrganizationResp"
    }
    example: {
      value: '{"success": true, "postponed": false}'
    }
  };

  // Whether the removal was successful
  bool success = 1;
  // True in case the removal will happen later after org has been charged one last time
  bool postponed = 2;
}

message AddSharableOrgReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "AddSharableOrgReq"
    }
    example: {
      value: '{"newOrgID": "string"}'
    }
  };

  // The ID of the new sharable org.
  string newOrgID = 1;
}

message AddSharableOrgResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "AddSharableOrgResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the add was successful
  bool success = 1;
}

message RemoveSharableOrgReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveSharableOrgReq"
    }
    example: {
      value: '{"removeOrgID": "string"}'
    }
  };

  // The ID of the sharable org to remove.
  string removeOrgID = 1;
}

message RemoveSharableOrgResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "RemoveSharableOrgResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the removal was successful
  bool success = 1;
}

message SetMultiLevelSharingReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetMultiLevelSharingReq"
    }
    example: {
      value: '{"enable": true}'
    }
  };

  // Whether or not to enable multi-level sharing
  bool enable = 1;
}

message  SetMultiLevelSharingResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetMultiLevelSharingResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the update was successful
  bool success = 1;
}

message SetAccountInfoReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetAccountInfoReq"
    }
    example: {
      value: '{"orgEmail": "newEmail@orgwebsite.com", "orgAddress": "1234 Org St."}'
    }
  };

  // The new organization email address
  string orgEmail = 1;
  // The new organization address
  string orgAddress = 2;
}
  
message  SetAccountInfoResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetAccountInfoResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the update was successful
  bool success = 1;
}

message SetUserInfoReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetUserInfoReq"
    }
    example: {
      value: '{"name": "User Person", "email": "newEmail@website.com"}'
    }
  };

  // The new user name
  string name = 1;
  // The new user email
  string email = 2;
}

message  SetUserInfoResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetUserInfoResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the update was successful
  bool success = 1;
}

message ChangeUserPasswordReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ChangeUserPasswordReq"
    }
    example: {
      value: '{"oldPassword": "oldPassword123", "newPassword": "newPassword123"}'
    }
  };

  // The old user password
  string oldPassword = 1;
  // The new user password
  string newPassword = 2;
}

message  ChangeUserPasswordResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ChangeUserPasswordResp"
    }
    example: {
      value: '{"success": true}'
    }
  };

  // Whether the update was successful
  bool success = 1;
}

message Subscription {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "Subscription"
    }
    example: {
      value: '{"type":"Credit Card","status":"Subscribed"}'
    }
  };

  // TODO: Either return integer codes instead (must be documented) or use enum

  // Subscription type (AWS Marketplace, Credit Card, etc.)
  string type = 1;
  // State of the subscription (Created, Subscribed, Unsubscribed, etc.)
  string status = 2;
}

message Payment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "Payment"
    }
    example: {
      value: '{"billedAt": "2020-02-01T12:30:15.123Z", "periodStart": "2020-01-01T00:00:00.000Z", "periodEnd": "2020-02-01T00:00:00.000Z", "amount": 52.16, "status": "No Payment" }'
    }
  };
 
  // Timestamp of the payment billing transaction
  google.protobuf.Timestamp billedAt = 1;
  // Start of the payment period
  google.protobuf.Timestamp periodStart = 2;
  // End of the payment period
  google.protobuf.Timestamp periodEnd = 3;
  // Amount of  payment 
  double amount = 4;
  // TODO document integer codes

  // Payment status ("No Payment","Zero Payment","Payment Pending","Payment Success","Payment Failed")
  string status = 5;
}

message GetAccountInfoReq {
}

message GetAccountInfoResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "GetAccountInfoResp"
    }
    example: {
      value: '{"orgID": "thisOrganization", "orgEmail": "email@company.com", "subscription":{"type":"Credit Card","status":"Subscribed"}, "payments":[{"billedAt": "2020-02-01T12:30:15.123Z", "periodStart": "2020-01-01T00:00:00.000Z", "periodEnd": "2020-02-01T00:00:00.000Z", "amount": 52.16, "status": "Payment Success" }], "orgAddress": "1600 Pennsylvania Ave NW, Washington, DC 20500", "multiLevelShare": true, "sharableOrgs": ["cnn", "democrats"]}'
    }
  };

  // Account's orgID
  string orgID = 1;
  // Account's email
  string orgEmail = 2;
  // Account's subscription info
  Subscription subscription = 3;
  // List of all account's payments
  repeated Payment payments = 4;
  // The address of the organization
  string orgAddress = 5;  
  // The ability to "reshare" a document that was shared to him/her to another user
  bool multiLevelShare = 6;
  // The list of sharable organization IDs.
  repeated string sharableOrgs = 7;
}

message GetUserInfoReq {
}

message GetUserInfoResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "GetUserInfoResp"
    }
    example: {
      value: '{"email": "donald.trump@whitehouse.gov", "userName": "Donald Trump", "role": "admin"}'
    }
  };

  // The user's userID
  string userID = 1;  
  // The user's email
  string email = 2;
  // The user's name
  string userName = 3;
  // The user's orgID
  string orgID = 4;
  // Whether the user is an admin
  bool isAdmin = 5;
}
