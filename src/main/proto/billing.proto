syntax = "proto3";

// This section is specific for Java language
// option java_multiple_files = true;
// option objc_class_prefix = "SD";
option java_package = "com.strongsalt.strongdoc.sdk.proto";
option java_outer_classname = "Billing";
option java_generic_services = true;

package proto;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

message GetBillingDetailsReq {
  // Timestamp of the requested billing details
  google.protobuf.Timestamp at = 1;
}

message GetBillingDetailsResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "GetBillingDetailsResp"
    }
    example: { 
      value: '{"periodStart": "2020-02-10T12:30:15.123Z", "periodEnd": "2020-03-01T00:00:00Z", "totalCost": 800548.00, "documents": {"cost": 16.08, "size": 148193280, "tier": "Document Storage Mid"}, "search": {"cost": 2.00, "size": 58982400, "tier": "Search Index Storage Low"}, "traffic": {"cost": 0, "incoming": 500.456, "outgoing": 200.564, "tier": "Network Traffic Free"}, "billingFrequency": {"frequency": "MONTHLY", "validFrom": "2020-02-10T12:30:15.123Z"}}'
    }
  };
  // Start of the requested billing period
  google.protobuf.Timestamp periodStart = 1;
  // End of the requested billing period
  google.protobuf.Timestamp periodEnd = 2;
  // Total cost incurred during the requested billing period
  double totalCost = 3;
  // Usage and cost breakdown for stored documents
  DocumentCosts documents = 4;
  // Usage and cost breakdown for stored search indices
  SearchCosts search = 5;
  // Usage and cost breakdown for used traffic
  TrafficCosts traffic = 6;
  // Billing frequency used during the requested billing period
  BillingFrequency billingFrequency = 7;
}

message GetBillingFrequencyListReq {}

message GetBillingFrequencyListResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "GetBillingFrequencyListResp"
    }
    example: { 
      value: '{"billingFrequencyList": [{"frequency": "MONTHLY", "validFrom": "2020-02-10T12:30:15.123Z"}]}'
    }
  };
  // List of billing frequencies
  repeated BillingFrequency billingFrequencyList = 1;
}

message SetNextBillingFrequencyReq {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetNextBillingFrequencyReq"
    }
    example: { 
      value: '{"frequency": "MONTHLY", "validFrom": "2020-02-10T12:30:15.123Z"}'
    }
  };
  // Billing frequency
  TimeInterval frequency = 1;
  // When this billing frequency becomes valid
  google.protobuf.Timestamp validFrom = 2;
}

message SetNextBillingFrequencyResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SetNextBillingFrequencyResp"
    }
    example: { 
      value: '{"nextBillingFrequency": {"frequency": "MONTHLY", "validFrom": "2020-02-10T12:30:15.123Z"}}'
    }
  };
  // Next billing frequency
  BillingFrequency nextBillingFrequency = 1;
}

enum TimeInterval {
  UNDEFINED = 0; // this is the default value
  MONTHLY = 1;
  YEARLY = 2;
}

message BillingFrequency {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "BillingFrequency"
    }
    example: { 
      value: '{"frequency": "MONTHLY", "validFrom": "2020-03-01T00:00:15.123Z", "validTo": "2020-06-01T00:00:00Z"}'
    }
  };
  // Billing frequency
  TimeInterval frequency = 1;
  // Start fo billing frequency validity
  google.protobuf.Timestamp validFrom = 2;
  // End of billing frequency validity
  google.protobuf.Timestamp validTo = 3;
}

message DocumentCosts {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "DocumentsCosts"
    }
    example: { 
      value: '{"cost": 16.08, "size": 148193280, "tier": "Document Storage Mid"}'
    }
  };
  // Cost of document storage incurred during a billing period
  double cost = 1;
  // Size of documents stored during a billing period (in MBhours)
  double size = 2;
  // Cost tier reached for document storage during a billing period
  string tier = 3;
}

message SearchCosts {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "SearchCosts"
    }
    example: { 
      value: '{"cost": 2.00, "size": 58982400, "tier": "Search Index Storage Low"}'
    }
  };
  // Cost of search index storage incurred during a billing period
  double cost = 1;
  // Size of search indices stored during a billing period (in MBhours)
  double size = 2;
  // Cost tier reached for search index storage during a billing period
  string tier = 3;
}

message TrafficCosts {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "TrafficCosts"
    }
    example: { 
      value: '{"cost": 0, "incoming": 500.456, "outgoing": 200.564, "tier": "Network Traffic Free"}'
    }
  };
  // Cost of network traffic incurred during a billing period
  double cost = 1;
  // Size of incoming requests during a billing period (in MB)
  double incoming = 2;
  // Size of outgoing requests during a billing period (in MB)
  double outgoing = 3;
  // Cost tier reached for network traffic during a billing period
  string tier = 4;
}

message ProcessSubscriptionEventReq {
  // https://stripe.com/docs/api/events/object
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ProcessSubscriptionEventReq"
    }
  };

  message EventData {
    google.protobuf.Struct object = 1;
  }
  message EventReq {
    string id = 1;
    string idempotencyKey = 2 [json_name = "idempotency_key"];
  }

	string id = 1;
  string account = 2;
  int32 created = 3;
  EventData data = 4;
	bool livemode = 5;
	int32 pendingWebhooks = 6 [json_name = "pending_webhooks"];
  EventReq request = 7;
  string type = 8;
  string apiVersion = 9 [json_name = "api_version"];
  string object = 10;
}

message ProcessSubscriptionEventResp {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      title: "ProcessSubscriptionEventResp"
    }
  };
}