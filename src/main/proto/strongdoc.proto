syntax = "proto3";

// This section is specific for Java language
//option java_multiple_files = true;
//option objc_class_prefix = "SD";
option java_package = "com.strongsalt.strongdoc.sdk.proto";
option java_outer_classname = "StrongDocProto";
option java_generic_services = true;

package proto;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "document.proto";
import "documentNoStore.proto";
import "search.proto";
import "accounts.proto";
import "billing.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "StrongDoc API";
		version: "1.0";
		contact: {
			name: "StrongSalt";
			email: "info@strongsalt.com";
		};
	};
	external_docs: {
		url: "https://github.com/grpc-ecosystem/grpc-gateway";
		description: "More about gRPC-Gateway";
  }
	consumes: "application/json";
  produces: "application/json";
  security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
        // The word "Bearer " and a space is required before the token
        description: "The word 'Bearer' and a space is required before the token.\nFor example,\nBearer authentication_token";
				name: "Authorization";
			}
    }
  }
};

service StrongDocService {
  // Registers a new organization
  //
  // The user who created the organization is automatically an administrator
  //
  // Does not require Login
  rpc RegisterOrganization(RegisterOrganizationReq) returns (RegisterOrganizationResp) {
    option (google.api.http) = {
      post: "/v1/account/registerOrganization"
      body: "*"
    };
  }

  // Remove an organization and its search indexes
  //
  // Requires Administrator privilege. Only an administrator can remove the whole organization
  //
  // Requires Login
  rpc RemoveOrganization(RemoveOrganizationReq) returns (RemoveOrganizationResp) {
    option (google.api.http) = {
      delete: "/v1/account/removeOrganization/{force}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Register new user
  //
  // Creates new user if it doesn't already exist. If the user already exist, and
  // error is thrown
  //
  // Requires administrator privilege
  rpc RegisterUser(RegisterUserReq) returns (RegisterUserResp) {
    option (google.api.http) = {
      post: "/v1/account/registerUser"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoResp) {
  //   option (google.api.http) = {
  //     post: "/v1/account/getuserinfo"
  //     body: "*"
  //   };
  //   option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
  //     security: {
  //       security_requirement: {
  //         key: "ApiKeyAuth";
  //         value: {};
  //       }
  //     };
  //   };
  // }

  // List the users of the organization
  //
  // Requires Login
  rpc ListUsers(ListUsersReq) returns (ListUsersResp) {
    option (google.api.http) = {
      get: "/v1/account/listUsers"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Remove user from organization
  //
  // Removes the user from the organization. The users documents still exists,
  // but belong to the organization, only accessible by organization admin.
  //
  // Requires administrator privilege.
  rpc RemoveUser(RemoveUserReq) returns (RemoveUserResp) {
    option (google.api.http) = {
      post: "/v1/account/removeUser"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Promote a regular user to administrator at the organization
  //
  // Requires administrator privilege.
  rpc PromoteUser(PromoteUserReq) returns (PromoteUserResp) {
    option (google.api.http) = {
      post: "/v1/account/promoteUser"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Demote administrator to regular user at the organization. Attempting to
  // demote the last administrator of an organization will fail
  //
  // Requires administrator privilege.
  rpc DemoteUser(DemoteUserReq) returns (DemoteUserResp) {
    option (google.api.http) = {
      post: "/v1/account/demoteUser"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }


  // List the documents the user can access
  //
  // Administrators can see all documents belonging to the organization
  //
  // Requires Login
  rpc ListDocuments(ListDocumentsReq) returns (ListDocumentsResp) {
    option (google.api.http) = {
      get: "/v1/doc/listDocs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Remove document the user can access
  //
  // Admin user can remove document for the whole organization
  // Regular user only can remove document for him/herself
  //
  // Requires Login
  rpc RemoveDocument(RemoveDocumentReq) returns (RemoveDocumentResp) {
    option (google.api.http) = {
      delete: "/v1/doc/remove/{docID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Upload document
  //
  // User can upload document to the organization for storage
  //
  // Requires Login
  rpc UploadDocumentStream(stream UploadDocStreamReq) returns (UploadDocStreamResp) {
    // This is not available through gRPC REST gateway,
    // since REST api does not support streaming protocol
  }

  // Upload document
  //
  // User can upload document to the organization for storage
  //
  // Requires Login
  rpc UploadDocument(UploadDocReq) returns (UploadDocResp) {
    option (google.api.http) = {
      post: "/v1/doc/upload"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Download document stream
  //
  // User can download the documents
  //
  // Requires Login
  rpc DownloadDocumentStream(DownloadDocStreamReq) returns (stream DownloadDocStreamResp) {
    // This is not available through gRPC REST gateway,
    // since REST api does not support streaming protocol
  }

  // Download document
  //
  // User can download the documents
  //
  // Requires Login
  rpc DownloadDocument(DownloadDocReq) returns (DownloadDocResp) {
    option (google.api.http) = {
      get: "/v1/doc/download/{docID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Encrypt document stream encrypts the document and returns the ciphertext
  // back to the user without storing it.
  //
  // Requires Login
  rpc EncryptDocumentStream(stream EncryptDocStreamReq) returns (stream EncryptDocStreamResp) {
    // This is not available through gRPC REST gateway,
    // since REST api does not support streaming protocol
  }

  // Encrypt document encrypts the document and returns the ciphertext
  // back to the user without storing it.
  //
  // Requires Login
  rpc EncryptDocument(EncryptDocReq) returns ( EncryptDocResp) {
    option (google.api.http) = {
      post: "/v1/doc/encrypt"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Decrypt document stream decrypts the ciphertext passed in and returns
  // decrypted plain text back to the user without storing it
  //
  // Requires Login
  rpc DecryptDocumentStream(stream DecryptDocStreamReq) returns (stream DecryptDocStreamResp) {
    // This is not available through gRPC REST gateway,
    // since REST api does not support streaming protocol
  }

  // Decrypt document decrypts the ciphertext passed in and returns
  // decrypted plain text back to the user without storing it
  rpc DecryptDocument(DecryptDocReq) returns (DecryptDocResp) {
    option (google.api.http) = {
      get: "/v1/doc/decrypt/{docID}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Share a document to another user
  //
  // Requires Login
  rpc ShareDocument(ShareDocumentReq) returns (ShareDocumentResp) {
    option (google.api.http) = {
      post: "/v1/doc/shareDoc"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Unshare a document that had previously been shared to a user
  //
  // Requires Login
  rpc UnshareDocument(UnshareDocumentReq) returns (UnshareDocumentResp) {
    option (google.api.http) = {
      post: "/v1/doc/unshareDoc"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Obtain an authentication token to be used with other APIs
  //
  // An authentication token will be returned after user has been validated
  // The returned token will be used as a Bearer Token and need to be set in
  // the request header
  rpc Login(LoginReq) returns (LoginResp) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  // Logout current user
  //
  // Requires Login
  rpc Logout(LogoutReq) returns (LogoutResp) {
    option (google.api.http) = {
      post: "/v1/logout"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Search within a list of user's accessible documents
  //
  // The response will include a list document id and its score when matches are found
  //
  // Requires Login
  rpc Search(SearchReq) returns (SearchResp) {
    option (google.api.http) = {
      get: "/v1/doc/search/{query}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Add a sharable organization to the user's organization.
  //
  //Requires Administrator privilege.
  //Requires Login
  rpc AddSharableOrg(AddSharableOrgReq) returns (AddSharableOrgResp) {
    option (google.api.http) = {
      patch: "/v1/account/addSharableOrg"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Remove a sharable organization from the user's organization.
  //
  //Requires Administrator privilege.
  //Requires Login
  rpc RemoveSharableOrg(RemoveSharableOrgReq) returns (RemoveSharableOrgResp) {
    option (google.api.http) = {
      patch: "/v1/account/removeSharableOrg"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Update the organization's multi-level sharing setting
  //
  //Requires Administrator privilege.
  //Requires Login
  rpc SetMultiLevelSharing(SetMultiLevelSharingReq) returns (SetMultiLevelSharingResp) {
    option (google.api.http) = {
      put: "/v1/account/setMultiLevelSharing"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //List all items of the cost breakdown and also other details such as the billing frequency
  //
  //Requires Administrator privilege
  //Requires Login
  rpc GetBillingDetails(GetBillingDetailsReq) returns (GetBillingDetailsResp) {
    option (google.api.http) = {
      get: "/v1/account/billing"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Obtain the list of billing frequencies (past, current and future)
  //
  //Requires Administrator privilege
  //Requires Login
  rpc GetBillingFrequencyList(GetBillingFrequencyListReq) returns (GetBillingFrequencyListResp) {
    option (google.api.http) = {
      get: "/v1/account/billing/frequency"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Change the next billing frequency
  //
  //Requires Administrator privilege
  //Requires Login
  rpc SetNextBillingFrequency(SetNextBillingFrequencyReq) returns (SetNextBillingFrequencyResp) {
    option (google.api.http) = {
      put: "/v1/account/billing/frequency"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Obtain the list of large traffic usages
  //
  //Requires Administrator privilege
  //Requires Login
  rpc GetLargeTraffic(GetLargeTrafficReq) returns (GetLargeTrafficResp) {
    option (google.api.http) = {
      get: "/v1/account/largeTraffic"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  //Obtain information about the account
  //
  //Requires Administrator privilege
  //Requires Login
  rpc GetAccountInfo(GetAccountInfoReq) returns (GetAccountInfoResp) {
    option (google.api.http) = {
      get: "/v1/account"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // Obtain information about logged user
  //
  // Requires Login
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoResp) {
    option (google.api.http) = {
      get: "/v1/account/user"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {};
        }
      };
    };
  }

  // //Show current server configuration
  // //
  // //Requires Administrator privilege. Only an administrator can see server configuration
  // //Requires Login
  // rpc GetConfiguration(GetConfigurationReq) returns (GetConfigurationResp) {
  //   option (google.api.http) = {
  //     get: "/v1/configuration"
  //   };
  //   option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
  //     security: {
  //       security_requirement: {
  //         key: "ApiKeyAuth";
  //         value: {};
  //       }
  //     };
  //   };
  // }
}

message GetConfigurationReq {
}

message GetConfigurationResp {
  string configuration = 1;
}
