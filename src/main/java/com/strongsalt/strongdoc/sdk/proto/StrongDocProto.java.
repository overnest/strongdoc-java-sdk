// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strongdoc.proto

package com.strongsalt.strongdoc.sdk.proto;

public final class StrongDocProto {
  private StrongDocProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GetConfigurationReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.GetConfigurationReq)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code proto.GetConfigurationReq}
   */
  public  static final class GetConfigurationReq extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.GetConfigurationReq)
      GetConfigurationReqOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetConfigurationReq.newBuilder() to construct.
    private GetConfigurationReq(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetConfigurationReq() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetConfigurationReq();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GetConfigurationReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationReq_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.class, com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq)) {
        return super.equals(obj);
      }
      com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq other = (com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.GetConfigurationReq}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.GetConfigurationReq)
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationReq_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.class, com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.Builder.class);
      }

      // Construct using com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationReq_descriptor;
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq getDefaultInstanceForType() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.getDefaultInstance();
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq build() {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq buildPartial() {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq result = new com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq) {
          return mergeFrom((com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq other) {
        if (other == com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.GetConfigurationReq)
    }

    // @@protoc_insertion_point(class_scope:proto.GetConfigurationReq)
    private static final com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq();
    }

    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetConfigurationReq>
        PARSER = new com.google.protobuf.AbstractParser<GetConfigurationReq>() {
      @java.lang.Override
      public GetConfigurationReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetConfigurationReq(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GetConfigurationReq> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetConfigurationReq> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GetConfigurationRespOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.GetConfigurationResp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string configuration = 1;</code>
     * @return The configuration.
     */
    java.lang.String getConfiguration();
    /**
     * <code>string configuration = 1;</code>
     * @return The bytes for configuration.
     */
    com.google.protobuf.ByteString
        getConfigurationBytes();
  }
  /**
   * Protobuf type {@code proto.GetConfigurationResp}
   */
  public  static final class GetConfigurationResp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:proto.GetConfigurationResp)
      GetConfigurationRespOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GetConfigurationResp.newBuilder() to construct.
    private GetConfigurationResp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GetConfigurationResp() {
      configuration_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GetConfigurationResp();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GetConfigurationResp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              configuration_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationResp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationResp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.class, com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.Builder.class);
    }

    public static final int CONFIGURATION_FIELD_NUMBER = 1;
    private volatile java.lang.Object configuration_;
    /**
     * <code>string configuration = 1;</code>
     * @return The configuration.
     */
    public java.lang.String getConfiguration() {
      java.lang.Object ref = configuration_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        configuration_ = s;
        return s;
      }
    }
    /**
     * <code>string configuration = 1;</code>
     * @return The bytes for configuration.
     */
    public com.google.protobuf.ByteString
        getConfigurationBytes() {
      java.lang.Object ref = configuration_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        configuration_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getConfigurationBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, configuration_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getConfigurationBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, configuration_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp)) {
        return super.equals(obj);
      }
      com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp other = (com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp) obj;

      if (!getConfiguration()
          .equals(other.getConfiguration())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONFIGURATION_FIELD_NUMBER;
      hash = (53 * hash) + getConfiguration().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.GetConfigurationResp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.GetConfigurationResp)
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationRespOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationResp_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationResp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.class, com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.Builder.class);
      }

      // Construct using com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        configuration_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.internal_static_proto_GetConfigurationResp_descriptor;
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp getDefaultInstanceForType() {
        return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.getDefaultInstance();
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp build() {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp buildPartial() {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp result = new com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp(this);
        result.configuration_ = configuration_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp) {
          return mergeFrom((com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp other) {
        if (other == com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp.getDefaultInstance()) return this;
        if (!other.getConfiguration().isEmpty()) {
          configuration_ = other.configuration_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object configuration_ = "";
      /**
       * <code>string configuration = 1;</code>
       * @return The configuration.
       */
      public java.lang.String getConfiguration() {
        java.lang.Object ref = configuration_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          configuration_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string configuration = 1;</code>
       * @return The bytes for configuration.
       */
      public com.google.protobuf.ByteString
          getConfigurationBytes() {
        java.lang.Object ref = configuration_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          configuration_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string configuration = 1;</code>
       * @param value The configuration to set.
       * @return This builder for chaining.
       */
      public Builder setConfiguration(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        configuration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string configuration = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConfiguration() {
        
        configuration_ = getDefaultInstance().getConfiguration();
        onChanged();
        return this;
      }
      /**
       * <code>string configuration = 1;</code>
       * @param value The bytes for configuration to set.
       * @return This builder for chaining.
       */
      public Builder setConfigurationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        configuration_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:proto.GetConfigurationResp)
    }

    // @@protoc_insertion_point(class_scope:proto.GetConfigurationResp)
    private static final com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp();
    }

    public static com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GetConfigurationResp>
        PARSER = new com.google.protobuf.AbstractParser<GetConfigurationResp>() {
      @java.lang.Override
      public GetConfigurationResp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GetConfigurationResp(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GetConfigurationResp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GetConfigurationResp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.strongsalt.strongdoc.sdk.proto.StrongDocProto.GetConfigurationResp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  /**
   * Protobuf service {@code proto.StrongDocService}
   */
  public static abstract class StrongDocService
      implements com.google.protobuf.Service {
    protected StrongDocService() {}

    public interface Interface {
      /**
       * <pre>
       * Registers a new organization
       * The user who created the organization is automatically an administrator
       * Does not require Login
       * </pre>
       *
       * <code>rpc RegisterOrganization(.proto.RegisterOrganizationReq) returns (.proto.RegisterOrganizationResp) { ... }</code>
       */
      public abstract void registerOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done);

      /**
       * <pre>
       * Reactivate an organization that was unsubscribed via aws
       * The user reactivating the organization becomes the administrator
       * Does not require login
       * </pre>
       *
       * <code>rpc ReactivateOrganization(.proto.RegisterOrganizationReq) returns (.proto.RegisterOrganizationResp) { ... }</code>
       */
      public abstract void reactivateOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done);

      /**
       * <pre>
       * Remove an organization and its search indexes
       * Requires Administrator privilege. Only an administrator can remove the whole organization
       * Requires Login
       * </pre>
       *
       * <code>rpc RemoveOrganization(.proto.RemoveOrganizationReq) returns (.proto.RemoveOrganizationResp) { ... }</code>
       */
      public abstract void removeOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp> done);

      /**
       * <pre>
       * Register new user
       * Creates new user if it doesn't already exist. If the user already exist, and
       * error is thrown
       * Requires administrator privilege
       * </pre>
       *
       * <code>rpc RegisterUser(.proto.RegisterUserReq) returns (.proto.RegisterUserResp) { ... }</code>
       */
      public abstract void registerUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp> done);

      /**
       * <pre>
       * List the users of the organization
       * Requires Login
       * </pre>
       *
       * <code>rpc ListUsers(.proto.ListUsersReq) returns (.proto.ListUsersResp) { ... }</code>
       */
      public abstract void listUsers(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp> done);

      /**
       * <pre>
       * Remove user from organization
       * Removes the user from the organization. The users documents still exists,
       * but belong to the organization, only accessible by organization admin.
       * Requires administrator privilege.
       * </pre>
       *
       * <code>rpc RemoveUser(.proto.RemoveUserReq) returns (.proto.RemoveUserResp) { ... }</code>
       */
      public abstract void removeUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp> done);

      /**
       * <pre>
       * Promote a regular user to administrator at the organization
       * Requires administrator privilege.
       * </pre>
       *
       * <code>rpc PromoteUser(.proto.PromoteUserReq) returns (.proto.PromoteUserResp) { ... }</code>
       */
      public abstract void promoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp> done);

      /**
       * <pre>
       * Demote administrator to regular user at the organization. Attempting to
       * demote the last administrator of an organization will fail
       * Requires administrator privilege.
       * </pre>
       *
       * <code>rpc DemoteUser(.proto.DemoteUserReq) returns (.proto.DemoteUserResp) { ... }</code>
       */
      public abstract void demoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp> done);

      /**
       * <pre>
       * List the documents the user can access
       * Administrators can see all documents belonging to the organization
       * Requires Login
       * </pre>
       *
       * <code>rpc ListDocuments(.proto.ListDocumentsReq) returns (.proto.ListDocumentsResp) { ... }</code>
       */
      public abstract void listDocuments(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp> done);

      /**
       * <pre>
       * Remove document the user can access
       * Admin user can remove document for the whole organization
       * Regular user only can remove document for him/herself
       * Requires Login
       * </pre>
       *
       * <code>rpc RemoveDocument(.proto.RemoveDocumentReq) returns (.proto.RemoveDocumentResp) { ... }</code>
       */
      public abstract void removeDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp> done);

      /**
       * <pre>
       * Upload document
       * User can upload document to the organization for storage
       * Requires Login
       * </pre>
       *
       * <code>rpc UploadDocumentStream(stream .proto.UploadDocStreamReq) returns (.proto.UploadDocStreamResp);</code>
       */
      public abstract void uploadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp> done);

      /**
       * <pre>
       * Upload document
       * User can upload document to the organization for storage
       * Requires Login
       * </pre>
       *
       * <code>rpc UploadDocument(.proto.UploadDocReq) returns (.proto.UploadDocResp) { ... }</code>
       */
      public abstract void uploadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp> done);

      /**
       * <pre>
       * Download document stream
       * User can download the documents
       * Requires Login
       * </pre>
       *
       * <code>rpc DownloadDocumentStream(.proto.DownloadDocStreamReq) returns (stream .proto.DownloadDocStreamResp);</code>
       */
      public abstract void downloadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp> done);

      /**
       * <pre>
       * Download document
       * User can download the documents
       * Requires Login
       * </pre>
       *
       * <code>rpc DownloadDocument(.proto.DownloadDocReq) returns (.proto.DownloadDocResp) { ... }</code>
       */
      public abstract void downloadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp> done);

      /**
       * <pre>
       * Encrypt document stream encrypts the document and returns the ciphertext
       * back to the user without storing it.
       * Requires Login
       * </pre>
       *
       * <code>rpc EncryptDocumentStream(stream .proto.EncryptDocStreamReq) returns (stream .proto.EncryptDocStreamResp);</code>
       */
      public abstract void encryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp> done);

      /**
       * <pre>
       * Encrypt document encrypts the document and returns the ciphertext
       * back to the user without storing it.
       * Requires Login
       * </pre>
       *
       * <code>rpc EncryptDocument(.proto.EncryptDocReq) returns (.proto.EncryptDocResp) { ... }</code>
       */
      public abstract void encryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp> done);

      /**
       * <pre>
       * Decrypt document stream decrypts the ciphertext passed in and returns
       * decrypted plain text back to the user without storing it
       * Requires Login
       * </pre>
       *
       * <code>rpc DecryptDocumentStream(stream .proto.DecryptDocStreamReq) returns (stream .proto.DecryptDocStreamResp);</code>
       */
      public abstract void decryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp> done);

      /**
       * <pre>
       * Decrypt document decrypts the ciphertext passed in and returns
       * decrypted plain text back to the user without storing it
       * </pre>
       *
       * <code>rpc DecryptDocument(.proto.DecryptDocReq) returns (.proto.DecryptDocResp) { ... }</code>
       */
      public abstract void decryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp> done);

      /**
       * <pre>
       * Share a document to another user
       * Requires Login
       * </pre>
       *
       * <code>rpc ShareDocument(.proto.ShareDocumentReq) returns (.proto.ShareDocumentResp) { ... }</code>
       */
      public abstract void shareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp> done);

      /**
       * <pre>
       * Unshare a document that had previously been shared to a user
       * Requires Login
       * </pre>
       *
       * <code>rpc UnshareDocument(.proto.UnshareDocumentReq) returns (.proto.UnshareDocumentResp) { ... }</code>
       */
      public abstract void unshareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp> done);

      /**
       * <pre>
       * Obtain an authentication token to be used with other APIs
       * An authentication token will be returned after user has been validated
       * The returned token will be used as a Bearer Token and need to be set in
       * the request header
       * </pre>
       *
       * <code>rpc Login(.proto.LoginReq) returns (.proto.LoginResp) { ... }</code>
       */
      public abstract void login(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LoginResp> done);

      /**
       * <pre>
       * Logout current user
       * Requires Login
       * </pre>
       *
       * <code>rpc Logout(.proto.LogoutReq) returns (.proto.LogoutResp) { ... }</code>
       */
      public abstract void logout(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp> done);

      /**
       * <pre>
       * Search within a list of user's accessible documents
       * The response will include a list document id and its score when matches are found
       * Requires Login
       * </pre>
       *
       * <code>rpc Search(.proto.SearchReq) returns (.proto.SearchResp) { ... }</code>
       */
      public abstract void search(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Search.SearchResp> done);

      /**
       * <pre>
       *Add a sharable organization to the user's organization.
       *Requires Administrator privilege.
       *Requires Login
       * </pre>
       *
       * <code>rpc AddSharableOrg(.proto.AddSharableOrgReq) returns (.proto.AddSharableOrgResp) { ... }</code>
       */
      public abstract void addSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp> done);

      /**
       * <pre>
       *Remove a sharable organization from the user's organization.
       *Requires Administrator privilege.
       *Requires Login
       * </pre>
       *
       * <code>rpc RemoveSharableOrg(.proto.RemoveSharableOrgReq) returns (.proto.RemoveSharableOrgResp) { ... }</code>
       */
      public abstract void removeSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp> done);

      /**
       * <pre>
       *Update the organization's multi-level sharing setting
       *Requires Administrator privilege.
       *Requires Login
       * </pre>
       *
       * <code>rpc SetMultiLevelSharing(.proto.SetMultiLevelSharingReq) returns (.proto.SetMultiLevelSharingResp) { ... }</code>
       */
      public abstract void setMultiLevelSharing(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp> done);

      /**
       * <pre>
       *Update the organization's account info
       *Requires Administrator privilege.
       *Requires Login
       * </pre>
       *
       * <code>rpc SetAccountInfo(.proto.SetAccountInfoReq) returns (.proto.SetAccountInfoResp) { ... }</code>
       */
      public abstract void setAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp> done);

      /**
       * <pre>
       *List all items of the cost breakdown and also other details such as the billing frequency
       *Requires Administrator privilege
       *Requires Login
       * </pre>
       *
       * <code>rpc GetBillingDetails(.proto.GetBillingDetailsReq) returns (.proto.GetBillingDetailsResp) { ... }</code>
       */
      public abstract void getBillingDetails(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp> done);

      /**
       * <pre>
       *Obtain the list of billing frequencies (past, current and future)
       *Requires Administrator privilege
       *Requires Login
       * </pre>
       *
       * <code>rpc GetBillingFrequencyList(.proto.GetBillingFrequencyListReq) returns (.proto.GetBillingFrequencyListResp) { ... }</code>
       */
      public abstract void getBillingFrequencyList(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp> done);

      /**
       * <pre>
       *Change the next billing frequency
       *Requires Administrator privilege
       *Requires Login
       * </pre>
       *
       * <code>rpc SetNextBillingFrequency(.proto.SetNextBillingFrequencyReq) returns (.proto.SetNextBillingFrequencyResp) { ... }</code>
       */
      public abstract void setNextBillingFrequency(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp> done);

      /**
       * <pre>
       *Obtain the list of large traffic usages
       *Requires Administrator privilege
       *Requires Login
       * </pre>
       *
       * <code>rpc GetLargeTraffic(.proto.GetLargeTrafficReq) returns (.proto.GetLargeTrafficResp) { ... }</code>
       */
      public abstract void getLargeTraffic(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp> done);

      /**
       * <pre>
       *Obtain information about the account
       *Requires Administrator privilege
       *Requires Login
       * </pre>
       *
       * <code>rpc GetAccountInfo(.proto.GetAccountInfoReq) returns (.proto.GetAccountInfoResp) { ... }</code>
       */
      public abstract void getAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp> done);

      /**
       * <pre>
       * Obtain information about logged in user
       * Requires Login
       * </pre>
       *
       * <code>rpc GetUserInfo(.proto.GetUserInfoReq) returns (.proto.GetUserInfoResp) { ... }</code>
       */
      public abstract void getUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp> done);

      /**
       * <pre>
       * Change the password of a logged in user
       * Requires Login
       * </pre>
       *
       * <code>rpc ChangeUserPassword(.proto.ChangeUserPasswordReq) returns (.proto.ChangeUserPasswordResp) { ... }</code>
       */
      public abstract void changeUserPassword(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp> done);

      /**
       * <pre>
       * Set information about a logged in user
       * Requires Login
       * </pre>
       *
       * <code>rpc SetUserInfo(.proto.SetUserInfoReq) returns (.proto.SetUserInfoResp) { ... }</code>
       */
      public abstract void setUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp> done);

      /**
       * <pre>
       * Obtain a list of the org's credit cards
       * Requires Administrator privilege
       * Requires Login
       * </pre>
       *
       * <code>rpc ListCreditCards(.proto.ListCreditCardsReq) returns (.proto.ListCreditCardsResp) { ... }</code>
       */
      public abstract void listCreditCards(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp> done);

      /**
       * <pre>
       * Add a payment method to the customer and validate the payment method
       * Requires Administrator privilege
       * Requires Login
       * </pre>
       *
       * <code>rpc AddPaymentMethod(.proto.AddPaymentMethodReq) returns (.proto.AddPaymentMethodResp) { ... }</code>
       */
      public abstract void addPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp> done);

      /**
       * <pre>
       * Set the default payment method for a stripe customer
       * Requires Administrator privilege
       * Requires Login
       * </pre>
       *
       * <code>rpc SetDefaultPaymentMethod(.proto.SetDefaultPaymentMethodReq) returns (.proto.SetDefaultPaymentMethodResp) { ... }</code>
       */
      public abstract void setDefaultPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp> done);

      /**
       * <pre>
       * Remove a payment method for a stripe customer
       * Requires Administrator privilege
       * Requires Login
       * </pre>
       *
       * <code>rpc RemovePaymentMethod(.proto.RemovePaymentMethodReq) returns (.proto.RemovePaymentMethodResp) { ... }</code>
       */
      public abstract void removePaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new StrongDocService() {
        @java.lang.Override
        public  void registerOrganization(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done) {
          impl.registerOrganization(controller, request, done);
        }

        @java.lang.Override
        public  void reactivateOrganization(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done) {
          impl.reactivateOrganization(controller, request, done);
        }

        @java.lang.Override
        public  void removeOrganization(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp> done) {
          impl.removeOrganization(controller, request, done);
        }

        @java.lang.Override
        public  void registerUser(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp> done) {
          impl.registerUser(controller, request, done);
        }

        @java.lang.Override
        public  void listUsers(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp> done) {
          impl.listUsers(controller, request, done);
        }

        @java.lang.Override
        public  void removeUser(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp> done) {
          impl.removeUser(controller, request, done);
        }

        @java.lang.Override
        public  void promoteUser(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp> done) {
          impl.promoteUser(controller, request, done);
        }

        @java.lang.Override
        public  void demoteUser(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp> done) {
          impl.demoteUser(controller, request, done);
        }

        @java.lang.Override
        public  void listDocuments(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp> done) {
          impl.listDocuments(controller, request, done);
        }

        @java.lang.Override
        public  void removeDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp> done) {
          impl.removeDocument(controller, request, done);
        }

        @java.lang.Override
        public  void uploadDocumentStream(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp> done) {
          impl.uploadDocumentStream(controller, request, done);
        }

        @java.lang.Override
        public  void uploadDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp> done) {
          impl.uploadDocument(controller, request, done);
        }

        @java.lang.Override
        public  void downloadDocumentStream(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp> done) {
          impl.downloadDocumentStream(controller, request, done);
        }

        @java.lang.Override
        public  void downloadDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp> done) {
          impl.downloadDocument(controller, request, done);
        }

        @java.lang.Override
        public  void encryptDocumentStream(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp> done) {
          impl.encryptDocumentStream(controller, request, done);
        }

        @java.lang.Override
        public  void encryptDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp> done) {
          impl.encryptDocument(controller, request, done);
        }

        @java.lang.Override
        public  void decryptDocumentStream(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp> done) {
          impl.decryptDocumentStream(controller, request, done);
        }

        @java.lang.Override
        public  void decryptDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp> done) {
          impl.decryptDocument(controller, request, done);
        }

        @java.lang.Override
        public  void shareDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp> done) {
          impl.shareDocument(controller, request, done);
        }

        @java.lang.Override
        public  void unshareDocument(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp> done) {
          impl.unshareDocument(controller, request, done);
        }

        @java.lang.Override
        public  void login(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LoginResp> done) {
          impl.login(controller, request, done);
        }

        @java.lang.Override
        public  void logout(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp> done) {
          impl.logout(controller, request, done);
        }

        @java.lang.Override
        public  void search(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Search.SearchResp> done) {
          impl.search(controller, request, done);
        }

        @java.lang.Override
        public  void addSharableOrg(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp> done) {
          impl.addSharableOrg(controller, request, done);
        }

        @java.lang.Override
        public  void removeSharableOrg(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp> done) {
          impl.removeSharableOrg(controller, request, done);
        }

        @java.lang.Override
        public  void setMultiLevelSharing(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp> done) {
          impl.setMultiLevelSharing(controller, request, done);
        }

        @java.lang.Override
        public  void setAccountInfo(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp> done) {
          impl.setAccountInfo(controller, request, done);
        }

        @java.lang.Override
        public  void getBillingDetails(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp> done) {
          impl.getBillingDetails(controller, request, done);
        }

        @java.lang.Override
        public  void getBillingFrequencyList(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp> done) {
          impl.getBillingFrequencyList(controller, request, done);
        }

        @java.lang.Override
        public  void setNextBillingFrequency(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp> done) {
          impl.setNextBillingFrequency(controller, request, done);
        }

        @java.lang.Override
        public  void getLargeTraffic(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp> done) {
          impl.getLargeTraffic(controller, request, done);
        }

        @java.lang.Override
        public  void getAccountInfo(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp> done) {
          impl.getAccountInfo(controller, request, done);
        }

        @java.lang.Override
        public  void getUserInfo(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp> done) {
          impl.getUserInfo(controller, request, done);
        }

        @java.lang.Override
        public  void changeUserPassword(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp> done) {
          impl.changeUserPassword(controller, request, done);
        }

        @java.lang.Override
        public  void setUserInfo(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp> done) {
          impl.setUserInfo(controller, request, done);
        }

        @java.lang.Override
        public  void listCreditCards(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp> done) {
          impl.listCreditCards(controller, request, done);
        }

        @java.lang.Override
        public  void addPaymentMethod(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp> done) {
          impl.addPaymentMethod(controller, request, done);
        }

        @java.lang.Override
        public  void setDefaultPaymentMethod(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp> done) {
          impl.setDefaultPaymentMethod(controller, request, done);
        }

        @java.lang.Override
        public  void removePaymentMethod(
            com.google.protobuf.RpcController controller,
            com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request,
            com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp> done) {
          impl.removePaymentMethod(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.registerOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq)request);
            case 1:
              return impl.reactivateOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq)request);
            case 2:
              return impl.removeOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq)request);
            case 3:
              return impl.registerUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq)request);
            case 4:
              return impl.listUsers(controller, (com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq)request);
            case 5:
              return impl.removeUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq)request);
            case 6:
              return impl.promoteUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq)request);
            case 7:
              return impl.demoteUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq)request);
            case 8:
              return impl.listDocuments(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq)request);
            case 9:
              return impl.removeDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq)request);
            case 10:
              return impl.uploadDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq)request);
            case 11:
              return impl.uploadDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq)request);
            case 12:
              return impl.downloadDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq)request);
            case 13:
              return impl.downloadDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq)request);
            case 14:
              return impl.encryptDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq)request);
            case 15:
              return impl.encryptDocument(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq)request);
            case 16:
              return impl.decryptDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq)request);
            case 17:
              return impl.decryptDocument(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq)request);
            case 18:
              return impl.shareDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq)request);
            case 19:
              return impl.unshareDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq)request);
            case 20:
              return impl.login(controller, (com.strongsalt.strongdoc.sdk.proto.Account.LoginReq)request);
            case 21:
              return impl.logout(controller, (com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq)request);
            case 22:
              return impl.search(controller, (com.strongsalt.strongdoc.sdk.proto.Search.SearchReq)request);
            case 23:
              return impl.addSharableOrg(controller, (com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq)request);
            case 24:
              return impl.removeSharableOrg(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq)request);
            case 25:
              return impl.setMultiLevelSharing(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq)request);
            case 26:
              return impl.setAccountInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq)request);
            case 27:
              return impl.getBillingDetails(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq)request);
            case 28:
              return impl.getBillingFrequencyList(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq)request);
            case 29:
              return impl.setNextBillingFrequency(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq)request);
            case 30:
              return impl.getLargeTraffic(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq)request);
            case 31:
              return impl.getAccountInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq)request);
            case 32:
              return impl.getUserInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq)request);
            case 33:
              return impl.changeUserPassword(controller, (com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq)request);
            case 34:
              return impl.setUserInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq)request);
            case 35:
              return impl.listCreditCards(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq)request);
            case 36:
              return impl.addPaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq)request);
            case 37:
              return impl.setDefaultPaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq)request);
            case 38:
              return impl.removePaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq.getDefaultInstance();
            case 1:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq.getDefaultInstance();
            case 2:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq.getDefaultInstance();
            case 3:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq.getDefaultInstance();
            case 4:
              return com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq.getDefaultInstance();
            case 5:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq.getDefaultInstance();
            case 6:
              return com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq.getDefaultInstance();
            case 7:
              return com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq.getDefaultInstance();
            case 8:
              return com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq.getDefaultInstance();
            case 9:
              return com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq.getDefaultInstance();
            case 10:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq.getDefaultInstance();
            case 11:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq.getDefaultInstance();
            case 12:
              return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq.getDefaultInstance();
            case 13:
              return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq.getDefaultInstance();
            case 14:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq.getDefaultInstance();
            case 15:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq.getDefaultInstance();
            case 16:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq.getDefaultInstance();
            case 17:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq.getDefaultInstance();
            case 18:
              return com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq.getDefaultInstance();
            case 19:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq.getDefaultInstance();
            case 20:
              return com.strongsalt.strongdoc.sdk.proto.Account.LoginReq.getDefaultInstance();
            case 21:
              return com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq.getDefaultInstance();
            case 22:
              return com.strongsalt.strongdoc.sdk.proto.Search.SearchReq.getDefaultInstance();
            case 23:
              return com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq.getDefaultInstance();
            case 24:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq.getDefaultInstance();
            case 25:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq.getDefaultInstance();
            case 26:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq.getDefaultInstance();
            case 27:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq.getDefaultInstance();
            case 28:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq.getDefaultInstance();
            case 29:
              return com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq.getDefaultInstance();
            case 30:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq.getDefaultInstance();
            case 31:
              return com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq.getDefaultInstance();
            case 32:
              return com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq.getDefaultInstance();
            case 33:
              return com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq.getDefaultInstance();
            case 34:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq.getDefaultInstance();
            case 35:
              return com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq.getDefaultInstance();
            case 36:
              return com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq.getDefaultInstance();
            case 37:
              return com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq.getDefaultInstance();
            case 38:
              return com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance();
            case 1:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance();
            case 2:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.getDefaultInstance();
            case 3:
              return com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.getDefaultInstance();
            case 4:
              return com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.getDefaultInstance();
            case 5:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.getDefaultInstance();
            case 6:
              return com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.getDefaultInstance();
            case 7:
              return com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.getDefaultInstance();
            case 8:
              return com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.getDefaultInstance();
            case 9:
              return com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.getDefaultInstance();
            case 10:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.getDefaultInstance();
            case 11:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.getDefaultInstance();
            case 12:
              return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.getDefaultInstance();
            case 13:
              return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.getDefaultInstance();
            case 14:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.getDefaultInstance();
            case 15:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.getDefaultInstance();
            case 16:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.getDefaultInstance();
            case 17:
              return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.getDefaultInstance();
            case 18:
              return com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.getDefaultInstance();
            case 19:
              return com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.getDefaultInstance();
            case 20:
              return com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.getDefaultInstance();
            case 21:
              return com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.getDefaultInstance();
            case 22:
              return com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.getDefaultInstance();
            case 23:
              return com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.getDefaultInstance();
            case 24:
              return com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.getDefaultInstance();
            case 25:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.getDefaultInstance();
            case 26:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.getDefaultInstance();
            case 27:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.getDefaultInstance();
            case 28:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.getDefaultInstance();
            case 29:
              return com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.getDefaultInstance();
            case 30:
              return com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.getDefaultInstance();
            case 31:
              return com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.getDefaultInstance();
            case 32:
              return com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.getDefaultInstance();
            case 33:
              return com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.getDefaultInstance();
            case 34:
              return com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.getDefaultInstance();
            case 35:
              return com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.getDefaultInstance();
            case 36:
              return com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.getDefaultInstance();
            case 37:
              return com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.getDefaultInstance();
            case 38:
              return com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <pre>
     * Registers a new organization
     * The user who created the organization is automatically an administrator
     * Does not require Login
     * </pre>
     *
     * <code>rpc RegisterOrganization(.proto.RegisterOrganizationReq) returns (.proto.RegisterOrganizationResp) { ... }</code>
     */
    public abstract void registerOrganization(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done);

    /**
     * <pre>
     * Reactivate an organization that was unsubscribed via aws
     * The user reactivating the organization becomes the administrator
     * Does not require login
     * </pre>
     *
     * <code>rpc ReactivateOrganization(.proto.RegisterOrganizationReq) returns (.proto.RegisterOrganizationResp) { ... }</code>
     */
    public abstract void reactivateOrganization(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done);

    /**
     * <pre>
     * Remove an organization and its search indexes
     * Requires Administrator privilege. Only an administrator can remove the whole organization
     * Requires Login
     * </pre>
     *
     * <code>rpc RemoveOrganization(.proto.RemoveOrganizationReq) returns (.proto.RemoveOrganizationResp) { ... }</code>
     */
    public abstract void removeOrganization(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp> done);

    /**
     * <pre>
     * Register new user
     * Creates new user if it doesn't already exist. If the user already exist, and
     * error is thrown
     * Requires administrator privilege
     * </pre>
     *
     * <code>rpc RegisterUser(.proto.RegisterUserReq) returns (.proto.RegisterUserResp) { ... }</code>
     */
    public abstract void registerUser(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp> done);

    /**
     * <pre>
     * List the users of the organization
     * Requires Login
     * </pre>
     *
     * <code>rpc ListUsers(.proto.ListUsersReq) returns (.proto.ListUsersResp) { ... }</code>
     */
    public abstract void listUsers(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp> done);

    /**
     * <pre>
     * Remove user from organization
     * Removes the user from the organization. The users documents still exists,
     * but belong to the organization, only accessible by organization admin.
     * Requires administrator privilege.
     * </pre>
     *
     * <code>rpc RemoveUser(.proto.RemoveUserReq) returns (.proto.RemoveUserResp) { ... }</code>
     */
    public abstract void removeUser(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp> done);

    /**
     * <pre>
     * Promote a regular user to administrator at the organization
     * Requires administrator privilege.
     * </pre>
     *
     * <code>rpc PromoteUser(.proto.PromoteUserReq) returns (.proto.PromoteUserResp) { ... }</code>
     */
    public abstract void promoteUser(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp> done);

    /**
     * <pre>
     * Demote administrator to regular user at the organization. Attempting to
     * demote the last administrator of an organization will fail
     * Requires administrator privilege.
     * </pre>
     *
     * <code>rpc DemoteUser(.proto.DemoteUserReq) returns (.proto.DemoteUserResp) { ... }</code>
     */
    public abstract void demoteUser(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp> done);

    /**
     * <pre>
     * List the documents the user can access
     * Administrators can see all documents belonging to the organization
     * Requires Login
     * </pre>
     *
     * <code>rpc ListDocuments(.proto.ListDocumentsReq) returns (.proto.ListDocumentsResp) { ... }</code>
     */
    public abstract void listDocuments(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp> done);

    /**
     * <pre>
     * Remove document the user can access
     * Admin user can remove document for the whole organization
     * Regular user only can remove document for him/herself
     * Requires Login
     * </pre>
     *
     * <code>rpc RemoveDocument(.proto.RemoveDocumentReq) returns (.proto.RemoveDocumentResp) { ... }</code>
     */
    public abstract void removeDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp> done);

    /**
     * <pre>
     * Upload document
     * User can upload document to the organization for storage
     * Requires Login
     * </pre>
     *
     * <code>rpc UploadDocumentStream(stream .proto.UploadDocStreamReq) returns (.proto.UploadDocStreamResp);</code>
     */
    public abstract void uploadDocumentStream(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp> done);

    /**
     * <pre>
     * Upload document
     * User can upload document to the organization for storage
     * Requires Login
     * </pre>
     *
     * <code>rpc UploadDocument(.proto.UploadDocReq) returns (.proto.UploadDocResp) { ... }</code>
     */
    public abstract void uploadDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp> done);

    /**
     * <pre>
     * Download document stream
     * User can download the documents
     * Requires Login
     * </pre>
     *
     * <code>rpc DownloadDocumentStream(.proto.DownloadDocStreamReq) returns (stream .proto.DownloadDocStreamResp);</code>
     */
    public abstract void downloadDocumentStream(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp> done);

    /**
     * <pre>
     * Download document
     * User can download the documents
     * Requires Login
     * </pre>
     *
     * <code>rpc DownloadDocument(.proto.DownloadDocReq) returns (.proto.DownloadDocResp) { ... }</code>
     */
    public abstract void downloadDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp> done);

    /**
     * <pre>
     * Encrypt document stream encrypts the document and returns the ciphertext
     * back to the user without storing it.
     * Requires Login
     * </pre>
     *
     * <code>rpc EncryptDocumentStream(stream .proto.EncryptDocStreamReq) returns (stream .proto.EncryptDocStreamResp);</code>
     */
    public abstract void encryptDocumentStream(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp> done);

    /**
     * <pre>
     * Encrypt document encrypts the document and returns the ciphertext
     * back to the user without storing it.
     * Requires Login
     * </pre>
     *
     * <code>rpc EncryptDocument(.proto.EncryptDocReq) returns (.proto.EncryptDocResp) { ... }</code>
     */
    public abstract void encryptDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp> done);

    /**
     * <pre>
     * Decrypt document stream decrypts the ciphertext passed in and returns
     * decrypted plain text back to the user without storing it
     * Requires Login
     * </pre>
     *
     * <code>rpc DecryptDocumentStream(stream .proto.DecryptDocStreamReq) returns (stream .proto.DecryptDocStreamResp);</code>
     */
    public abstract void decryptDocumentStream(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp> done);

    /**
     * <pre>
     * Decrypt document decrypts the ciphertext passed in and returns
     * decrypted plain text back to the user without storing it
     * </pre>
     *
     * <code>rpc DecryptDocument(.proto.DecryptDocReq) returns (.proto.DecryptDocResp) { ... }</code>
     */
    public abstract void decryptDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp> done);

    /**
     * <pre>
     * Share a document to another user
     * Requires Login
     * </pre>
     *
     * <code>rpc ShareDocument(.proto.ShareDocumentReq) returns (.proto.ShareDocumentResp) { ... }</code>
     */
    public abstract void shareDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp> done);

    /**
     * <pre>
     * Unshare a document that had previously been shared to a user
     * Requires Login
     * </pre>
     *
     * <code>rpc UnshareDocument(.proto.UnshareDocumentReq) returns (.proto.UnshareDocumentResp) { ... }</code>
     */
    public abstract void unshareDocument(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp> done);

    /**
     * <pre>
     * Obtain an authentication token to be used with other APIs
     * An authentication token will be returned after user has been validated
     * The returned token will be used as a Bearer Token and need to be set in
     * the request header
     * </pre>
     *
     * <code>rpc Login(.proto.LoginReq) returns (.proto.LoginResp) { ... }</code>
     */
    public abstract void login(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LoginResp> done);

    /**
     * <pre>
     * Logout current user
     * Requires Login
     * </pre>
     *
     * <code>rpc Logout(.proto.LogoutReq) returns (.proto.LogoutResp) { ... }</code>
     */
    public abstract void logout(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp> done);

    /**
     * <pre>
     * Search within a list of user's accessible documents
     * The response will include a list document id and its score when matches are found
     * Requires Login
     * </pre>
     *
     * <code>rpc Search(.proto.SearchReq) returns (.proto.SearchResp) { ... }</code>
     */
    public abstract void search(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Search.SearchResp> done);

    /**
     * <pre>
     *Add a sharable organization to the user's organization.
     *Requires Administrator privilege.
     *Requires Login
     * </pre>
     *
     * <code>rpc AddSharableOrg(.proto.AddSharableOrgReq) returns (.proto.AddSharableOrgResp) { ... }</code>
     */
    public abstract void addSharableOrg(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp> done);

    /**
     * <pre>
     *Remove a sharable organization from the user's organization.
     *Requires Administrator privilege.
     *Requires Login
     * </pre>
     *
     * <code>rpc RemoveSharableOrg(.proto.RemoveSharableOrgReq) returns (.proto.RemoveSharableOrgResp) { ... }</code>
     */
    public abstract void removeSharableOrg(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp> done);

    /**
     * <pre>
     *Update the organization's multi-level sharing setting
     *Requires Administrator privilege.
     *Requires Login
     * </pre>
     *
     * <code>rpc SetMultiLevelSharing(.proto.SetMultiLevelSharingReq) returns (.proto.SetMultiLevelSharingResp) { ... }</code>
     */
    public abstract void setMultiLevelSharing(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp> done);

    /**
     * <pre>
     *Update the organization's account info
     *Requires Administrator privilege.
     *Requires Login
     * </pre>
     *
     * <code>rpc SetAccountInfo(.proto.SetAccountInfoReq) returns (.proto.SetAccountInfoResp) { ... }</code>
     */
    public abstract void setAccountInfo(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp> done);

    /**
     * <pre>
     *List all items of the cost breakdown and also other details such as the billing frequency
     *Requires Administrator privilege
     *Requires Login
     * </pre>
     *
     * <code>rpc GetBillingDetails(.proto.GetBillingDetailsReq) returns (.proto.GetBillingDetailsResp) { ... }</code>
     */
    public abstract void getBillingDetails(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp> done);

    /**
     * <pre>
     *Obtain the list of billing frequencies (past, current and future)
     *Requires Administrator privilege
     *Requires Login
     * </pre>
     *
     * <code>rpc GetBillingFrequencyList(.proto.GetBillingFrequencyListReq) returns (.proto.GetBillingFrequencyListResp) { ... }</code>
     */
    public abstract void getBillingFrequencyList(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp> done);

    /**
     * <pre>
     *Change the next billing frequency
     *Requires Administrator privilege
     *Requires Login
     * </pre>
     *
     * <code>rpc SetNextBillingFrequency(.proto.SetNextBillingFrequencyReq) returns (.proto.SetNextBillingFrequencyResp) { ... }</code>
     */
    public abstract void setNextBillingFrequency(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp> done);

    /**
     * <pre>
     *Obtain the list of large traffic usages
     *Requires Administrator privilege
     *Requires Login
     * </pre>
     *
     * <code>rpc GetLargeTraffic(.proto.GetLargeTrafficReq) returns (.proto.GetLargeTrafficResp) { ... }</code>
     */
    public abstract void getLargeTraffic(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp> done);

    /**
     * <pre>
     *Obtain information about the account
     *Requires Administrator privilege
     *Requires Login
     * </pre>
     *
     * <code>rpc GetAccountInfo(.proto.GetAccountInfoReq) returns (.proto.GetAccountInfoResp) { ... }</code>
     */
    public abstract void getAccountInfo(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp> done);

    /**
     * <pre>
     * Obtain information about logged in user
     * Requires Login
     * </pre>
     *
     * <code>rpc GetUserInfo(.proto.GetUserInfoReq) returns (.proto.GetUserInfoResp) { ... }</code>
     */
    public abstract void getUserInfo(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp> done);

    /**
     * <pre>
     * Change the password of a logged in user
     * Requires Login
     * </pre>
     *
     * <code>rpc ChangeUserPassword(.proto.ChangeUserPasswordReq) returns (.proto.ChangeUserPasswordResp) { ... }</code>
     */
    public abstract void changeUserPassword(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp> done);

    /**
     * <pre>
     * Set information about a logged in user
     * Requires Login
     * </pre>
     *
     * <code>rpc SetUserInfo(.proto.SetUserInfoReq) returns (.proto.SetUserInfoResp) { ... }</code>
     */
    public abstract void setUserInfo(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp> done);

    /**
     * <pre>
     * Obtain a list of the org's credit cards
     * Requires Administrator privilege
     * Requires Login
     * </pre>
     *
     * <code>rpc ListCreditCards(.proto.ListCreditCardsReq) returns (.proto.ListCreditCardsResp) { ... }</code>
     */
    public abstract void listCreditCards(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp> done);

    /**
     * <pre>
     * Add a payment method to the customer and validate the payment method
     * Requires Administrator privilege
     * Requires Login
     * </pre>
     *
     * <code>rpc AddPaymentMethod(.proto.AddPaymentMethodReq) returns (.proto.AddPaymentMethodResp) { ... }</code>
     */
    public abstract void addPaymentMethod(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp> done);

    /**
     * <pre>
     * Set the default payment method for a stripe customer
     * Requires Administrator privilege
     * Requires Login
     * </pre>
     *
     * <code>rpc SetDefaultPaymentMethod(.proto.SetDefaultPaymentMethodReq) returns (.proto.SetDefaultPaymentMethodResp) { ... }</code>
     */
    public abstract void setDefaultPaymentMethod(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp> done);

    /**
     * <pre>
     * Remove a payment method for a stripe customer
     * Requires Administrator privilege
     * Requires Login
     * </pre>
     *
     * <code>rpc RemovePaymentMethod(.proto.RemovePaymentMethodReq) returns (.proto.RemovePaymentMethodResp) { ... }</code>
     */
    public abstract void removePaymentMethod(
        com.google.protobuf.RpcController controller,
        com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request,
        com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return com.strongsalt.strongdoc.sdk.proto.StrongDocProto.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.registerOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp>specializeCallback(
              done));
          return;
        case 1:
          this.reactivateOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp>specializeCallback(
              done));
          return;
        case 2:
          this.removeOrganization(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp>specializeCallback(
              done));
          return;
        case 3:
          this.registerUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp>specializeCallback(
              done));
          return;
        case 4:
          this.listUsers(controller, (com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp>specializeCallback(
              done));
          return;
        case 5:
          this.removeUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp>specializeCallback(
              done));
          return;
        case 6:
          this.promoteUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp>specializeCallback(
              done));
          return;
        case 7:
          this.demoteUser(controller, (com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp>specializeCallback(
              done));
          return;
        case 8:
          this.listDocuments(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp>specializeCallback(
              done));
          return;
        case 9:
          this.removeDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp>specializeCallback(
              done));
          return;
        case 10:
          this.uploadDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp>specializeCallback(
              done));
          return;
        case 11:
          this.uploadDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp>specializeCallback(
              done));
          return;
        case 12:
          this.downloadDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp>specializeCallback(
              done));
          return;
        case 13:
          this.downloadDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp>specializeCallback(
              done));
          return;
        case 14:
          this.encryptDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp>specializeCallback(
              done));
          return;
        case 15:
          this.encryptDocument(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp>specializeCallback(
              done));
          return;
        case 16:
          this.decryptDocumentStream(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp>specializeCallback(
              done));
          return;
        case 17:
          this.decryptDocument(controller, (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp>specializeCallback(
              done));
          return;
        case 18:
          this.shareDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp>specializeCallback(
              done));
          return;
        case 19:
          this.unshareDocument(controller, (com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp>specializeCallback(
              done));
          return;
        case 20:
          this.login(controller, (com.strongsalt.strongdoc.sdk.proto.Account.LoginReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.LoginResp>specializeCallback(
              done));
          return;
        case 21:
          this.logout(controller, (com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp>specializeCallback(
              done));
          return;
        case 22:
          this.search(controller, (com.strongsalt.strongdoc.sdk.proto.Search.SearchReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Search.SearchResp>specializeCallback(
              done));
          return;
        case 23:
          this.addSharableOrg(controller, (com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp>specializeCallback(
              done));
          return;
        case 24:
          this.removeSharableOrg(controller, (com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp>specializeCallback(
              done));
          return;
        case 25:
          this.setMultiLevelSharing(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp>specializeCallback(
              done));
          return;
        case 26:
          this.setAccountInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp>specializeCallback(
              done));
          return;
        case 27:
          this.getBillingDetails(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp>specializeCallback(
              done));
          return;
        case 28:
          this.getBillingFrequencyList(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp>specializeCallback(
              done));
          return;
        case 29:
          this.setNextBillingFrequency(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp>specializeCallback(
              done));
          return;
        case 30:
          this.getLargeTraffic(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp>specializeCallback(
              done));
          return;
        case 31:
          this.getAccountInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp>specializeCallback(
              done));
          return;
        case 32:
          this.getUserInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp>specializeCallback(
              done));
          return;
        case 33:
          this.changeUserPassword(controller, (com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp>specializeCallback(
              done));
          return;
        case 34:
          this.setUserInfo(controller, (com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp>specializeCallback(
              done));
          return;
        case 35:
          this.listCreditCards(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp>specializeCallback(
              done));
          return;
        case 36:
          this.addPaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp>specializeCallback(
              done));
          return;
        case 37:
          this.setDefaultPaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp>specializeCallback(
              done));
          return;
        case 38:
          this.removePaymentMethod(controller, (com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq)request,
            com.google.protobuf.RpcUtil.<com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq.getDefaultInstance();
        case 1:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq.getDefaultInstance();
        case 2:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq.getDefaultInstance();
        case 3:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq.getDefaultInstance();
        case 4:
          return com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq.getDefaultInstance();
        case 5:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq.getDefaultInstance();
        case 6:
          return com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq.getDefaultInstance();
        case 7:
          return com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq.getDefaultInstance();
        case 8:
          return com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq.getDefaultInstance();
        case 9:
          return com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq.getDefaultInstance();
        case 10:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq.getDefaultInstance();
        case 11:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq.getDefaultInstance();
        case 12:
          return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq.getDefaultInstance();
        case 13:
          return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq.getDefaultInstance();
        case 14:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq.getDefaultInstance();
        case 15:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq.getDefaultInstance();
        case 16:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq.getDefaultInstance();
        case 17:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq.getDefaultInstance();
        case 18:
          return com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq.getDefaultInstance();
        case 19:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq.getDefaultInstance();
        case 20:
          return com.strongsalt.strongdoc.sdk.proto.Account.LoginReq.getDefaultInstance();
        case 21:
          return com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq.getDefaultInstance();
        case 22:
          return com.strongsalt.strongdoc.sdk.proto.Search.SearchReq.getDefaultInstance();
        case 23:
          return com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq.getDefaultInstance();
        case 24:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq.getDefaultInstance();
        case 25:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq.getDefaultInstance();
        case 26:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq.getDefaultInstance();
        case 27:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq.getDefaultInstance();
        case 28:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq.getDefaultInstance();
        case 29:
          return com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq.getDefaultInstance();
        case 30:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq.getDefaultInstance();
        case 31:
          return com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq.getDefaultInstance();
        case 32:
          return com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq.getDefaultInstance();
        case 33:
          return com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq.getDefaultInstance();
        case 34:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq.getDefaultInstance();
        case 35:
          return com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq.getDefaultInstance();
        case 36:
          return com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq.getDefaultInstance();
        case 37:
          return com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq.getDefaultInstance();
        case 38:
          return com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance();
        case 1:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance();
        case 2:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.getDefaultInstance();
        case 3:
          return com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.getDefaultInstance();
        case 4:
          return com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.getDefaultInstance();
        case 5:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.getDefaultInstance();
        case 6:
          return com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.getDefaultInstance();
        case 7:
          return com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.getDefaultInstance();
        case 8:
          return com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.getDefaultInstance();
        case 9:
          return com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.getDefaultInstance();
        case 10:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.getDefaultInstance();
        case 11:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.getDefaultInstance();
        case 12:
          return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.getDefaultInstance();
        case 13:
          return com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.getDefaultInstance();
        case 14:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.getDefaultInstance();
        case 15:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.getDefaultInstance();
        case 16:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.getDefaultInstance();
        case 17:
          return com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.getDefaultInstance();
        case 18:
          return com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.getDefaultInstance();
        case 19:
          return com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.getDefaultInstance();
        case 20:
          return com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.getDefaultInstance();
        case 21:
          return com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.getDefaultInstance();
        case 22:
          return com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.getDefaultInstance();
        case 23:
          return com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.getDefaultInstance();
        case 24:
          return com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.getDefaultInstance();
        case 25:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.getDefaultInstance();
        case 26:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.getDefaultInstance();
        case 27:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.getDefaultInstance();
        case 28:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.getDefaultInstance();
        case 29:
          return com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.getDefaultInstance();
        case 30:
          return com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.getDefaultInstance();
        case 31:
          return com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.getDefaultInstance();
        case 32:
          return com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.getDefaultInstance();
        case 33:
          return com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.getDefaultInstance();
        case 34:
          return com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.getDefaultInstance();
        case 35:
          return com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.getDefaultInstance();
        case 36:
          return com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.getDefaultInstance();
        case 37:
          return com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.getDefaultInstance();
        case 38:
          return com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends com.strongsalt.strongdoc.sdk.proto.StrongDocProto.StrongDocService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void registerOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance()));
      }

      public  void reactivateOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance()));
      }

      public  void removeOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.getDefaultInstance()));
      }

      public  void registerUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.getDefaultInstance()));
      }

      public  void listUsers(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.getDefaultInstance()));
      }

      public  void removeUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.getDefaultInstance()));
      }

      public  void promoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.getDefaultInstance()));
      }

      public  void demoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(7),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.getDefaultInstance()));
      }

      public  void listDocuments(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(8),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.getDefaultInstance()));
      }

      public  void removeDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(9),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.getDefaultInstance()));
      }

      public  void uploadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(10),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.getDefaultInstance()));
      }

      public  void uploadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(11),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.getDefaultInstance()));
      }

      public  void downloadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(12),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.getDefaultInstance()));
      }

      public  void downloadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(13),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.getDefaultInstance()));
      }

      public  void encryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(14),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.class,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.getDefaultInstance()));
      }

      public  void encryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(15),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.class,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.getDefaultInstance()));
      }

      public  void decryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(16),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.class,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.getDefaultInstance()));
      }

      public  void decryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(17),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.class,
            com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.getDefaultInstance()));
      }

      public  void shareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(18),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.getDefaultInstance()));
      }

      public  void unshareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(19),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.class,
            com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.getDefaultInstance()));
      }

      public  void login(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LoginResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(20),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.getDefaultInstance()));
      }

      public  void logout(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(21),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.getDefaultInstance()));
      }

      public  void search(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Search.SearchResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(22),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.class,
            com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.getDefaultInstance()));
      }

      public  void addSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(23),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.getDefaultInstance()));
      }

      public  void removeSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(24),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.getDefaultInstance()));
      }

      public  void setMultiLevelSharing(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(25),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.getDefaultInstance()));
      }

      public  void setAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(26),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.getDefaultInstance()));
      }

      public  void getBillingDetails(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(27),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.getDefaultInstance()));
      }

      public  void getBillingFrequencyList(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(28),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.getDefaultInstance()));
      }

      public  void setNextBillingFrequency(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(29),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.getDefaultInstance()));
      }

      public  void getLargeTraffic(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(30),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.getDefaultInstance()));
      }

      public  void getAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(31),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.getDefaultInstance()));
      }

      public  void getUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(32),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.getDefaultInstance()));
      }

      public  void changeUserPassword(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(33),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.getDefaultInstance()));
      }

      public  void setUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(34),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.class,
            com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.getDefaultInstance()));
      }

      public  void listCreditCards(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(35),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.getDefaultInstance()));
      }

      public  void addPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(36),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.getDefaultInstance()));
      }

      public  void setDefaultPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(37),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.getDefaultInstance()));
      }

      public  void removePaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request,
          com.google.protobuf.RpcCallback<com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(38),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.class,
            com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp registerOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp reactivateOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp removeOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp registerUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp listUsers(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp removeUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp promoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp demoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp listDocuments(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp removeDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp uploadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp uploadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp downloadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp downloadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp encryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp encryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp decryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp decryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp shareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp unshareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.LoginResp login(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp logout(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Search.SearchResp search(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp addSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp removeSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp setMultiLevelSharing(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp setAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp getBillingDetails(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp getBillingFrequencyList(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp setNextBillingFrequency(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp getLargeTraffic(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp getAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp getUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp changeUserPassword(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp setUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp listCreditCards(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp addPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp setDefaultPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request)
          throws com.google.protobuf.ServiceException;

      public com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp removePaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp registerOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp reactivateOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterOrganizationResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp removeOrganization(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveOrganizationResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp registerUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RegisterUserResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp listUsers(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.ListUsersResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp removeUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveUserResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp promoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.PromoteUserResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp demoteUser(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(7),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.DemoteUserResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp listDocuments(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(8),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.ListDocumentsResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp removeDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(9),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.RemoveDocumentResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp uploadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(10),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocStreamResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp uploadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(11),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UploadDocResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp downloadDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(12),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocStreamResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp downloadDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(13),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.DownloadDocResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp encryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(14),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocStreamResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp encryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(15),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.EncryptDocResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp decryptDocumentStream(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(16),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocStreamResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp decryptDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(17),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.DecryptDocResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp shareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(18),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.ShareDocumentResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp unshareDocument(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(19),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Documents.UnshareDocumentResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.LoginResp login(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.LoginResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(20),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.LoginResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp logout(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(21),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.LogoutResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Search.SearchResp search(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Search.SearchResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(22),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Search.SearchResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp addSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(23),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.AddSharableOrgResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp removeSharableOrg(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(24),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.RemoveSharableOrgResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp setMultiLevelSharing(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(25),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetMultiLevelSharingResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp setAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(26),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetAccountInfoResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp getBillingDetails(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(27),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingDetailsResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp getBillingFrequencyList(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(28),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetBillingFrequencyListResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp setNextBillingFrequency(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(29),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetNextBillingFrequencyResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp getLargeTraffic(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(30),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.GetLargeTrafficResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp getAccountInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(31),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.GetAccountInfoResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp getUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(32),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.GetUserInfoResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp changeUserPassword(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(33),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.ChangeUserPasswordResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp setUserInfo(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(34),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Account.SetUserInfoResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp listCreditCards(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(35),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.ListCreditCardsResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp addPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(36),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.AddPaymentMethodResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp setDefaultPaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(37),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.SetDefaultPaymentMethodResp.getDefaultInstance());
      }


      public com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp removePaymentMethod(
          com.google.protobuf.RpcController controller,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodReq request)
          throws com.google.protobuf.ServiceException {
        return (com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp) channel.callBlockingMethod(
          getDescriptor().getMethods().get(38),
          controller,
          request,
          com.strongsalt.strongdoc.sdk.proto.Billing.RemovePaymentMethodResp.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:proto.StrongDocService)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_GetConfigurationReq_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_GetConfigurationReq_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_GetConfigurationResp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_proto_GetConfigurationResp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017strongdoc.proto\022\005proto\032\034google/api/ann" +
      "otations.proto\032,protoc-gen-swagger/optio" +
      "ns/annotations.proto\032\016document.proto\032\025do" +
      "cumentNoStore.proto\032\014search.proto\032\016accou" +
      "nts.proto\032\rbilling.proto\"\025\n\023GetConfigura" +
      "tionReq\"-\n\024GetConfigurationResp\022\025\n\rconfi" +
      "guration\030\001 \001(\t2\271%\n\020StrongDocService\022\204\001\n\024" +
      "RegisterOrganization\022\036.proto.RegisterOrg" +
      "anizationReq\032\037.proto.RegisterOrganizatio" +
      "nResp\"+\202\323\344\223\002%\" /v1/account/registerOrgan" +
      "ization:\001*\022\210\001\n\026ReactivateOrganization\022\036." +
      "proto.RegisterOrganizationReq\032\037.proto.Re" +
      "gisterOrganizationResp\"-\202\323\344\223\002\'\"\"/v1/acco" +
      "unt/reactivateOrganization:\001*\022\226\001\n\022Remove" +
      "Organization\022\034.proto.RemoveOrganizationR" +
      "eq\032\035.proto.RemoveOrganizationResp\"C\202\323\344\223\002" +
      "(*&/v1/account/removeOrganization/{force" +
      "}\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022y\n\014RegisterUser\022\026" +
      ".proto.RegisterUserReq\032\027.proto.RegisterU" +
      "serResp\"8\202\323\344\223\002\035\"\030/v1/account/registerUse" +
      "r:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022j\n\tListUsers\022\023" +
      ".proto.ListUsersReq\032\024.proto.ListUsersRes" +
      "p\"2\202\323\344\223\002\027\022\025/v1/account/listUsers\222A\022b\020\n\016\n" +
      "\nApiKeyAuth\022\000\022q\n\nRemoveUser\022\024.proto.Remo" +
      "veUserReq\032\025.proto.RemoveUserResp\"6\202\323\344\223\002\033" +
      "\"\026/v1/account/removeUser:\001*\222A\022b\020\n\016\n\nApiK" +
      "eyAuth\022\000\022u\n\013PromoteUser\022\025.proto.PromoteU" +
      "serReq\032\026.proto.PromoteUserResp\"7\202\323\344\223\002\034\"\027" +
      "/v1/account/promoteUser:\001*\222A\022b\020\n\016\n\nApiKe" +
      "yAuth\022\000\022q\n\nDemoteUser\022\024.proto.DemoteUser" +
      "Req\032\025.proto.DemoteUserResp\"6\202\323\344\223\002\033\"\026/v1/" +
      "account/demoteUser:\001*\222A\022b\020\n\016\n\nApiKeyAuth" +
      "\022\000\022q\n\rListDocuments\022\027.proto.ListDocument" +
      "sReq\032\030.proto.ListDocumentsResp\"-\202\323\344\223\002\022\022\020" +
      "/v1/doc/listDocs\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022z\n" +
      "\016RemoveDocument\022\030.proto.RemoveDocumentRe" +
      "q\032\031.proto.RemoveDocumentResp\"3\202\323\344\223\002\030*\026/v" +
      "1/doc/remove/{docID}\222A\022b\020\n\016\n\nApiKeyAuth\022" +
      "\000\022Q\n\024UploadDocumentStream\022\031.proto.Upload" +
      "DocStreamReq\032\032.proto.UploadDocStreamResp" +
      "\"\000(\001\022k\n\016UploadDocument\022\023.proto.UploadDoc" +
      "Req\032\024.proto.UploadDocResp\".\202\323\344\223\002\023\"\016/v1/d" +
      "oc/upload:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022W\n\026Dow" +
      "nloadDocumentStream\022\033.proto.DownloadDocS" +
      "treamReq\032\034.proto.DownloadDocStreamResp\"\000" +
      "0\001\022x\n\020DownloadDocument\022\025.proto.DownloadD" +
      "ocReq\032\026.proto.DownloadDocResp\"5\202\323\344\223\002\032\022\030/" +
      "v1/doc/download/{docID}\222A\022b\020\n\016\n\nApiKeyAu" +
      "th\022\000\022V\n\025EncryptDocumentStream\022\032.proto.En" +
      "cryptDocStreamReq\032\033.proto.EncryptDocStre" +
      "amResp\"\000(\0010\001\022o\n\017EncryptDocument\022\024.proto." +
      "EncryptDocReq\032\025.proto.EncryptDocResp\"/\202\323" +
      "\344\223\002\024\"\017/v1/doc/encrypt:\001*\222A\022b\020\n\016\n\nApiKeyA" +
      "uth\022\000\022V\n\025DecryptDocumentStream\022\032.proto.D" +
      "ecryptDocStreamReq\032\033.proto.DecryptDocStr" +
      "eamResp\"\000(\0010\001\022t\n\017DecryptDocument\022\024.proto" +
      ".DecryptDocReq\032\025.proto.DecryptDocResp\"4\202" +
      "\323\344\223\002\031\022\027/v1/doc/decrypt/{docID}\222A\022b\020\n\016\n\nA" +
      "piKeyAuth\022\000\022t\n\rShareDocument\022\027.proto.Sha" +
      "reDocumentReq\032\030.proto.ShareDocumentResp\"" +
      "0\202\323\344\223\002\025\"\020/v1/doc/shareDoc:\001*\222A\022b\020\n\016\n\nApi" +
      "KeyAuth\022\000\022|\n\017UnshareDocument\022\031.proto.Uns" +
      "hareDocumentReq\032\032.proto.UnshareDocumentR" +
      "esp\"2\202\323\344\223\002\027\"\022/v1/doc/unshareDoc:\001*\222A\022b\020\n" +
      "\016\n\nApiKeyAuth\022\000\022E\n\005Login\022\017.proto.LoginRe" +
      "q\032\020.proto.LoginResp\"\031\202\323\344\223\002\023\"\016/v1/auth/lo" +
      "gin:\001*\022V\n\006Logout\022\020.proto.LogoutReq\032\021.pro" +
      "to.LogoutResp\"\'\202\323\344\223\002\014\"\n/v1/logout\222A\022b\020\n\016" +
      "\n\nApiKeyAuth\022\000\022b\n\006Search\022\020.proto.SearchR" +
      "eq\032\021.proto.SearchResp\"3\202\323\344\223\002\030\022\026/v1/doc/s" +
      "earch/{query}\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022\201\001\n\016A" +
      "ddSharableOrg\022\030.proto.AddSharableOrgReq\032" +
      "\031.proto.AddSharableOrgResp\":\202\323\344\223\002\0372\032/v1/" +
      "account/addSharableOrg:\001*\222A\022b\020\n\016\n\nApiKey" +
      "Auth\022\000\022\215\001\n\021RemoveSharableOrg\022\033.proto.Rem" +
      "oveSharableOrgReq\032\034.proto.RemoveSharable" +
      "OrgResp\"=\202\323\344\223\002\"2\035/v1/account/removeShara" +
      "bleOrg:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022\231\001\n\024SetMu" +
      "ltiLevelSharing\022\036.proto.SetMultiLevelSha" +
      "ringReq\032\037.proto.SetMultiLevelSharingResp" +
      "\"@\202\323\344\223\002%\032 /v1/account/setMultiLevelShari" +
      "ng:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022\201\001\n\016SetAccoun" +
      "tInfo\022\030.proto.SetAccountInfoReq\032\031.proto." +
      "SetAccountInfoResp\":\202\323\344\223\002\037\032\032/v1/account/" +
      "setAccountInfo:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022\200" +
      "\001\n\021GetBillingDetails\022\033.proto.GetBillingD" +
      "etailsReq\032\034.proto.GetBillingDetailsResp\"" +
      "0\202\323\344\223\002\025\022\023/v1/account/billing\222A\022b\020\n\016\n\nApi" +
      "KeyAuth\022\000\022\234\001\n\027GetBillingFrequencyList\022!." +
      "proto.GetBillingFrequencyListReq\032\".proto" +
      ".GetBillingFrequencyListResp\":\202\323\344\223\002\037\022\035/v" +
      "1/account/billing/frequency\222A\022b\020\n\016\n\nApiK" +
      "eyAuth\022\000\022\237\001\n\027SetNextBillingFrequency\022!.p" +
      "roto.SetNextBillingFrequencyReq\032\".proto." +
      "SetNextBillingFrequencyResp\"=\202\323\344\223\002\"\032\035/v1" +
      "/account/billing/frequency:\001*\222A\022b\020\n\016\n\nAp" +
      "iKeyAuth\022\000\022\177\n\017GetLargeTraffic\022\031.proto.Ge" +
      "tLargeTrafficReq\032\032.proto.GetLargeTraffic" +
      "Resp\"5\202\323\344\223\002\032\022\030/v1/account/largeTraffic\222A" +
      "\022b\020\n\016\n\nApiKeyAuth\022\000\022o\n\016GetAccountInfo\022\030." +
      "proto.GetAccountInfoReq\032\031.proto.GetAccou" +
      "ntInfoResp\"(\202\323\344\223\002\r\022\013/v1/account\222A\022b\020\n\016\n\n" +
      "ApiKeyAuth\022\000\022k\n\013GetUserInfo\022\025.proto.GetU" +
      "serInfoReq\032\026.proto.GetUserInfoResp\"-\202\323\344\223" +
      "\002\022\022\020/v1/account/user\222A\022b\020\n\016\n\nApiKeyAuth\022" +
      "\000\022\221\001\n\022ChangeUserPassword\022\034.proto.ChangeU" +
      "serPasswordReq\032\035.proto.ChangeUserPasswor" +
      "dResp\">\202\323\344\223\002#\032\036/v1/account/changeUserPas" +
      "sword:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022u\n\013SetUser" +
      "Info\022\025.proto.SetUserInfoReq\032\026.proto.SetU" +
      "serInfoResp\"7\202\323\344\223\002\034\032\027/v1/account/setUser" +
      "Info:\001*\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022x\n\017ListCred" +
      "itCards\022\031.proto.ListCreditCardsReq\032\032.pro" +
      "to.ListCreditCardsResp\".\202\323\344\223\002\023\022\021/v1/bill" +
      "ing/cards\222A\022b\020\n\016\n\nApiKeyAuth\022\000\022\206\001\n\020AddPa" +
      "ymentMethod\022\032.proto.AddPaymentMethodReq\032" +
      "\033.proto.AddPaymentMethodResp\"9\202\323\344\223\002\036\"\031/v" +
      "1/billing/paymentMethod:\001*\222A\022b\020\n\016\n\nApiKe" +
      "yAuth\022\000\022\243\001\n\027SetDefaultPaymentMethod\022!.pr" +
      "oto.SetDefaultPaymentMethodReq\032\".proto.S" +
      "etDefaultPaymentMethodResp\"A\202\323\344\223\002&\032!/v1/" +
      "billing/paymentMethod/default:\001*\222A\022b\020\n\016\n" +
      "\nApiKeyAuth\022\000\022\232\001\n\023RemovePaymentMethod\022\035." +
      "proto.RemovePaymentMethodReq\032\036.proto.Rem" +
      "ovePaymentMethodResp\"D\202\323\344\223\002)*\'/v1/billin" +
      "g/paymentMethod/remove/{pmID}\222A\022b\020\n\016\n\nAp" +
      "iKeyAuth\022\000B\360\002\n\"com.strongsalt.strongdoc." +
      "sdk.protoB\016StrongDocProto\210\001\001\222A\265\002\0227\n\rStro" +
      "ngDoc API\"!\n\nStrongSalt\032\023info@strongsalt" +
      ".com2\0031.02\020application/json:\020application" +
      "/jsonZ\212\001\n\207\001\n\nApiKeyAuth\022y\010\002\022dThe word \'B" +
      "earer\' and a space is required before th" +
      "e token.\nFor example,\nBearer authenticat" +
      "ion_token\032\rAuthorization \002rI\n\027More about" +
      " gRPC-Gateway\022.https://github.com/grpc-e" +
      "cosystem/grpc-gatewayb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor(),
          com.strongsalt.strongdoc.sdk.proto.Documents.getDescriptor(),
          com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.getDescriptor(),
          com.strongsalt.strongdoc.sdk.proto.Search.getDescriptor(),
          com.strongsalt.strongdoc.sdk.proto.Account.getDescriptor(),
          com.strongsalt.strongdoc.sdk.proto.Billing.getDescriptor(),
        });
    internal_static_proto_GetConfigurationReq_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_GetConfigurationReq_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_GetConfigurationReq_descriptor,
        new java.lang.String[] { });
    internal_static_proto_GetConfigurationResp_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_proto_GetConfigurationResp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_proto_GetConfigurationResp_descriptor,
        new java.lang.String[] { "Configuration", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Operation);
    registry.add(grpc.gateway.protoc_gen_swagger.options.Annotations.openapiv2Swagger);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    grpc.gateway.protoc_gen_swagger.options.Annotations.getDescriptor();
    com.strongsalt.strongdoc.sdk.proto.Documents.getDescriptor();
    com.strongsalt.strongdoc.sdk.proto.DocumentsNoStore.getDescriptor();
    com.strongsalt.strongdoc.sdk.proto.Search.getDescriptor();
    com.strongsalt.strongdoc.sdk.proto.Account.getDescriptor();
    com.strongsalt.strongdoc.sdk.proto.Billing.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
